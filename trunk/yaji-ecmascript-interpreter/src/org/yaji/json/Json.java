/* Generated By:JavaCC: Do not edit this line. Json.java */
package org.yaji.json;

import FESI.Data.ESValue;
import FESI.Data.ESBoolean;
import FESI.Data.ESNull;
import FESI.Data.ESString;
import FESI.Data.ESNumber;
import FESI.Data.ESObject;
import FESI.Data.ObjectObject;
import FESI.Exceptions.EcmaScriptException;
import FESI.Interpreter.Evaluator;

@SuppressWarnings("all")
public class Json implements JsonConstants {

        private String unescape(String s) {
          return s.substring(1,s.length()-1);
        }

        private Evaluator evaluator;

        public void setEvaluator(Evaluator evaluator) {
          this.evaluator = evaluator;
        }

  final public ESValue Parse() throws ParseException {
        ESValue v;
    v = Value();
    jj_consume_token(0);
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public ESValue Value() throws ParseException {
        ESValue v;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
                          v = ESBoolean.valueOf(false);
      break;
    case 16:
      jj_consume_token(16);
                          v = ESNull.theNull;
      break;
    case 17:
      jj_consume_token(17);
                      v = ESBoolean.valueOf(true);
      break;
    case BEGIN_OBJECT:
      v = Object();
      break;
    case BEGIN_ARRAY:
      v = Array();
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                             v = ESNumber.valueOf(t.image);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                                     v = new ESString(unescape(t.image));
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public ESObject Object() throws ParseException {
          ESObject map = ObjectObject.createObject(evaluator);
    jj_consume_token(BEGIN_OBJECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      Member(map);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VALUE_SEPARATOR:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(VALUE_SEPARATOR);
        Member(map);
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(END_OBJECT);
          {if (true) return map;}
    throw new Error("Missing return statement in function");
  }

  final public ESObject Array() throws ParseException {
        ESValue v;
        ESValue[] esValues;
      ESObject array; try { array = evaluator.createArray(); esValues = new ESValue[1];
    } catch (EcmaScriptException e) { {if (true) throw new ParseException("Programming error");} }
    jj_consume_token(BEGIN_ARRAY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN_ARRAY:
    case BEGIN_OBJECT:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case 15:
    case 16:
    case 17:
      v = Value();
                        try { esValues[0] = v; array.doIndirectCall(evaluator,array,"push",esValues); }
                        catch (NoSuchMethodException e) { {if (true) throw new ParseException("Programming error");} }
                        catch (EcmaScriptException e) { {if (true) throw new ParseException("Programming error");} }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VALUE_SEPARATOR:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(VALUE_SEPARATOR);
        v = Value();
                                            try{esValues[0] = v; array.doIndirectCall(evaluator,array,"push",esValues);}
                                                                catch (NoSuchMethodException e) { {if (true) throw new ParseException("Programming error");} }
                                                                                catch (EcmaScriptException e) { {if (true) throw new ParseException("Programming error");} }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(END_ARRAY);
          {if (true) return array;}
    throw new Error("Missing return statement in function");
  }

  final public void Member(ESObject map) throws ParseException {
    Token t;
    ESValue v;
    t = jj_consume_token(STRING_LITERAL);
    jj_consume_token(NAME_SEPARATOR);
    v = Value();
                                                        String propertyName = unescape(t.image);
                                                                                                        try {
                                                          map.putProperty(propertyName,v,propertyName.hashCode());
                                                        } catch( EcmaScriptException e ) {
                                                          {if (true) throw new ParseException(e.getMessage());}
                                                        }
  }

  /** Generated Token Manager. */
  public JsonTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3a860,0x400,0x2000,0x400,0x3a860,};
   }

  /** Constructor with InputStream. */
  public Json(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Json(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JsonTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Json(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JsonTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Json(JsonTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JsonTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
