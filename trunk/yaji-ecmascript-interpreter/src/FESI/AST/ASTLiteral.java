// $codepro.audit.disable logExceptions
/* Generated By:JJTree: Do not edit this line. ASTLiteral.java */

package FESI.AST;

import FESI.Data.ESBoolean;
import FESI.Data.ESNull;
import FESI.Data.ESNumber;
import FESI.Data.ESString;
import FESI.Data.ESValue;
import FESI.Exceptions.ProgrammingError;
import FESI.Parser.EcmaScript;

public class ASTLiteral extends SimpleNode {
    private static final char LS = '\u2028';
    private static final char PS = '\u2029';
    private static final long serialVersionUID = 628607318343717769L;
    private ESValue theValue = null;

    public ASTLiteral(int id) {
        super(id);
    }

    public ASTLiteral(EcmaScript p, int id) {
        super(p, id);
    }

    public static Node jjtCreate(int id) {
        return new ASTLiteral(id);
    }

    public static Node jjtCreate(EcmaScript p, int id) {
        return new ASTLiteral(p, id);
    }

    /** Accept the visitor. **/
    @Override
    public Object jjtAccept(EcmaScriptVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    // JMCL
    public ESValue getValue() {
        return theValue;
    }

    static final int hexval(char c) throws ProgrammingError {
        switch (c) {
        case '0':
            return 0;
        case '1':
            return 1;
        case '2':
            return 2;
        case '3':
            return 3;
        case '4':
            return 4;
        case '5':
            return 5;
        case '6':
            return 6;
        case '7':
            return 7;
        case '8':
            return 8;
        case '9':
            return 9;

        case 'a':
        case 'A':
            return 10;
        case 'b':
        case 'B':
            return 11;
        case 'c':
        case 'C':
            return 12;
        case 'd':
        case 'D':
            return 13;
        case 'e':
        case 'E':
            return 14;
        case 'f':
        case 'F':
            return 15;
        }

        throw new ProgrammingError("Illegal hex or unicode constant"); // Should
                                                                       // never
                                                                       // come
                                                                       // here
    }

    static final int octval(char c) throws ProgrammingError {
        switch (c) {
        case '0':
            return 0;
        case '1':
            return 1;
        case '2':
            return 2;
        case '3':
            return 3;
        case '4':
            return 4;
        case '5':
            return 5;
        case '6':
            return 6;
        case '7':
            return 7;
        }

        throw new ProgrammingError("Illegal octal constant"); // Should never
                                                              // come here
    }

    public void setStringValue(String image) {
        int length = image.length();
        StringBuilder sb = new StringBuilder(length);
        forloop: for (int i = 0; i < length; i++) {
            char c = image.charAt(i);
            if ((c == '\\') && (i + 1 < length)) {
                i++;
                c = image.charAt(i);
                if (c == 'n') {
                    c = '\n';
                } else if (c == 'b') {
                    c = '\b';
                } else if (c == 'f') {
                    c = '\f';
                } else if (c == 'r') {
                    c = '\r';
                } else if (c == 't') {
                    c = '\t';
                } else if (c == 'v') {
                    c = '\u000B';
                } else if (c == 'x' && (i+2) < length) {
                    c = 0;
                    for( int j=1; j<3; j++) {
                        char c1 = image.charAt(i+j);
                        if (isHex(c1)) {
                            c = (char) ((c << 4) | hexval(c1));
                        } else {
                            sb.append('x');
                            continue forloop;
                        }
                    }
                    i += 2;
                } else if (c == 'u' && (i+4) < length) {
                    c = 0;
                    for( int j=1; j<5; j++) {
                        char c1 = image.charAt(i+j);
                        if (isHex(c1)) {
                            c = (char) ((c << 4) | hexval(c1));
                        } else {
                            sb.append('u');
                            continue forloop;
                        }
                    }
                    i += 4;
                } else if (c >= '0' && c <= '7') {
                    c = (char) (octval(c));
                    if ((i+1) < length) {
                        char c1 = image.charAt(i + 1);
                        if (isOctal(c1)) {
                            i++;
                            c = (char) ((c << 3) | octval(c1));
                            if (i < length && c <= '\037') {
                                c1 = image.charAt(i + 1);
                                if (isOctal(c1)) {
                                    i++;
                                    c = (char) ((c << 3) | octval(c1));
                                }
                            }
                        }
                    }
                } else if (c == '\r') {
                    if (i < length && image.charAt(i+1) == '\n') {
                        i++;
                    }
                    continue forloop;
                } else if (c == '\n' || c == LS || c == PS) {
                    continue forloop;
                }
            }
            sb.append(c);
        }
        theValue = new ESString(sb.toString());
    }

    private boolean isHex(char c1) {
        return (c1 >= '0' && c1 <= '9') || (c1 >= 'a' && c1 <= 'f') || (c1 >= 'A' && c1 <= 'F');
    }

    private boolean isOctal(char c1) {
        return (c1 >= '0') && (c1 <= '7');
    }

    public void setDecimalValue(String image) {
        try {
            theValue = ESNumber.valueOf(Long.parseLong(image));
        } catch (NumberFormatException e) {
            Double value = new Double(image);
            theValue = ESNumber.valueOf(value.doubleValue());
        }
    }

    public void setOctalValue(String image) {
        // Parser seems to call this for literal 0 initialisation
        if ("0".equals(image)) {
            theValue = ESNumber.ZERO;
        } else {
            try {
                String imageWithout0 = image.substring(1);
                theValue = ESNumber.valueOf(Long.parseLong(imageWithout0, 8));
            } catch (NumberFormatException e) {
                Double value = new Double(image);
                theValue = ESNumber.valueOf(value.doubleValue());
            }
        }
    }

    public void setHexValue(String image) {
        try {
            String imageWithout0x = image.substring(2);
            theValue = ESNumber.valueOf(Long.parseLong(imageWithout0x, 16));
        } catch (NumberFormatException e) {
            Double value = new Double(image);
            theValue = ESNumber.valueOf(value.doubleValue());
        }
    }

    public void setFloatingPointValue(String image) {
        Double value = new Double(image);
        theValue = ESNumber.valueOf(value.doubleValue());
    }

    public void setBooleanValue(boolean value) {
        theValue = ESBoolean.valueOf(value);
    }

    public void setNullValue() {
        theValue = ESNull.theNull;
    }

    @Override
    public String toString() {
        return "[" + theValue.toString() + "]";
    }

}
