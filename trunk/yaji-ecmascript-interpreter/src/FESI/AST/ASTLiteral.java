// $codepro.audit.disable logExceptions
/* Generated By:JJTree: Do not edit this line. ASTLiteral.java */

package FESI.AST;

import FESI.Data.ESBoolean;
import FESI.Data.ESNull;
import FESI.Data.ESNumber;
import FESI.Data.ESString;
import FESI.Data.ESValue;
import FESI.Exceptions.SyntaxError;
import FESI.Interpreter.PackagedException;
import FESI.Parser.EcmaScript;

public class ASTLiteral extends SimpleNode {
    private static final char LS = '\u2028';
    private static final char PS = '\u2029';
    private static final long serialVersionUID = 628607318343717769L;
    private ESValue theValue = null;

    public ASTLiteral(int id) {
        super(id);
    }

    public ASTLiteral(EcmaScript p, int id) {
        super(p, id);
    }

    public static Node jjtCreate(int id) {
        return new ASTLiteral(id);
    }

    public static Node jjtCreate(EcmaScript p, int id) {
        return new ASTLiteral(p, id);
    }

    /** Accept the visitor. **/
    @Override
    public Object jjtAccept(EcmaScriptVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    // JMCL
    public ESValue getValue() {
        return theValue;
    }

    public void setStringValue(String image, boolean strictMode) {
        int length = image.length();
        StringBuilder sb = new StringBuilder(length);
        forloop: for (int i = 0; i < length; i++) {
            char c = image.charAt(i);
            if ((c == '\\') && (i + 1 < length)) {
                i++;
                c = image.charAt(i);
                if (c == 'n') {
                    c = '\n';
                } else if (c == 'b') {
                    c = '\b';
                } else if (c == 'f') {
                    c = '\f';
                } else if (c == 'r') {
                    c = '\r';
                } else if (c == 't') {
                    c = '\t';
                } else if (c == 'v') {
                    c = '\u000B';
                } else if (c == 'x' && (i+2) < length) {
                    c = 0;
                    for( int j=1; j<3; j++) {
                        char c1 = image.charAt(i+j);
                        if (isHex(c1)) {
                            c = (char) ((c << 4) | hexval(c1));
                        } else {
                            sb.append('x');
                            continue forloop;
                        }
                    }
                    i += 2;
                } else if (c == 'u' && (i+4) < length) {
                    c = 0;
                    for( int j=1; j<5; j++) {
                        char c1 = image.charAt(i+j);
                        if (isHex(c1)) {
                            c = (char) ((c << 4) | hexval(c1));
                        } else {
                            sb.append('u');
                            continue forloop;
                        }
                    }
                    i += 4;
                } else if (c >= '0' && c <= '7') {
                    c = (char) (octval(c));
                    if (c != '0' && strictMode) {
                        failHandlingOctalInStrictMode();
                    }
                    if ((i+1) < length) {
                        char c1 = image.charAt(i + 1);
                        if (isOctal(c1)) {
                            if (strictMode) {
                                failHandlingOctalInStrictMode();
                            }
                            i++;
                            c = (char) ((c << 3) | octval(c1));
                            if (i < length && c <= '\037') {
                                c1 = image.charAt(i + 1);
                                if (isOctal(c1)) {
                                    i++;
                                    c = (char) ((c << 3) | octval(c1));
                                }
                            }
                        }
                    }
                } else if (c == '\r') {
                    if (i < length && image.charAt(i+1) == '\n') {
                        i++;
                    }
                    continue forloop;
                } else if (c == '\n' || c == LS || c == PS) {
                    continue forloop;
                }
            }
            sb.append(c);
        }
        theValue = new ESString(sb.toString());
    }

    public void failHandlingOctalInStrictMode() {
        throw new PackagedException(new SyntaxError("Octal literals are not allowed in Strict Mode"), this);
    }

    public void setDecimalValue(String image) {
        try {
            theValue = ESNumber.valueOf(Long.parseLong(image));
        } catch (NumberFormatException e) {
            Double value = new Double(image);
            theValue = ESNumber.valueOf(value.doubleValue());
        }
    }

    public void setOctalValue(String image) {
        // Parser seems to call this for literal 0 initialisation
        if ("0".equals(image)) {
            theValue = ESNumber.ZERO;
        } else {
            try {
                String imageWithout0 = image.substring(1);
                theValue = ESNumber.valueOf(Long.parseLong(imageWithout0, 8));
            } catch (NumberFormatException e) {
                Double value = new Double(image);
                theValue = ESNumber.valueOf(value.doubleValue());
            }
        }
    }

    public void setHexValue(String image) {
        try {
            String imageWithout0x = image.substring(2);
            theValue = ESNumber.valueOf(Long.parseLong(imageWithout0x, 16));
        } catch (NumberFormatException e) {
            Double value = new Double(image);
            theValue = ESNumber.valueOf(value.doubleValue());
        }
    }

    public void setFloatingPointValue(String image) {
        Double value = new Double(image);
        theValue = ESNumber.valueOf(value.doubleValue());
    }

    public void setBooleanValue(boolean value) {
        theValue = ESBoolean.valueOf(value);
    }

    public void setNullValue() {
        theValue = ESNull.theNull;
    }

    @Override
    public String toString() {
        return "[" + theValue.toString() + "]";
    }

}
