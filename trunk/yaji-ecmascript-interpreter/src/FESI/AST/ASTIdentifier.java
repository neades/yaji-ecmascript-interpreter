/* Generated By:JJTree: Do not edit this line. ASTIdentifier.java */

package FESI.AST;

import FESI.Data.ESString;
import FESI.Parser.EcmaScript;
import FESI.Parser.ParseException;

public class ASTIdentifier extends SimpleNode {
    private static final long serialVersionUID = 2673088409445831343L;
    private static final int ZWNJ_CODE = 0x200C;
    private static final int ZWJ_CODE = 0x200D;
    private ESString identifierName = null;
    private int hash = 0;

    public ASTIdentifier(int id) {
        super(id);
    }

    public ASTIdentifier(EcmaScript p, int id) {
        super(p, id);
    }

    public static Node jjtCreate(int id) {
        return new ASTIdentifier(id);
    }

    public static Node jjtCreate(EcmaScript p, int id) {
        return new ASTIdentifier(p, id);
    }

    /** Accept the visitor. **/
    @Override
    public Object jjtAccept(EcmaScriptVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    // JMCL
    public void setName(String identifierName) throws ParseException {
        int len = identifierName.length();
        StringBuilder sb = new StringBuilder(len);

        // Unicode escape processing
        parent: 
            for (int i = 0; i < len; i++) {
            char c = identifierName.charAt(i);
            if (c == '\\') {
                if (identifierName.charAt(++i) == 'u' && (i + 4) < len) {
                    c = 0;
                    for (int j = 1; j < 5; j++) {
                        char c1 = identifierName.charAt(i + j);
                        if (isHex(c1)) {
                            c = (char) ((c << 4) | hexval(c1));
                        } else {
                            sb.append('u');
                            continue parent;
                        }
                    }
                    i += 4;
                    if (!isValid(c, i == 5)) {
                        throw new ParseException("Invalid character \\u" + Integer.toHexString(c) + " in identifier");
                    }
                }
            }
            
            sb.append(c);
        }

        identifierName = sb.toString();
        this.identifierName = new ESString(identifierName);
        this.hash = identifierName.hashCode();
    }

    private boolean isValid(char c, boolean isStart) {
        int characterType = Character.getType(c);
        if (isStart) {
            return isIdentifierStart(c, characterType);
        }
        return isIdentifierPart(c, characterType);
    }
    private boolean isIdentifierStart(int c, int characterType) {
        return isUnicodeLetter(characterType) || c == '\\' || c == '$' || c == '_';
    }
    private boolean isUnicodeLetter(int characterType) {
        return characterType == Character.UPPERCASE_LETTER
            || characterType == Character.LOWERCASE_LETTER
            || characterType == Character.TITLECASE_LETTER
            || characterType == Character.MODIFIER_LETTER
            || characterType == Character.OTHER_LETTER
            || characterType == Character.LETTER_NUMBER;
    }
    
    private boolean isIdentifierPart(int c, int characterType) {
        return isIdentifierStart(c, characterType)
                || isUnicodeCombiningMark(characterType)
                || isUnicodeDigit(characterType)
                || isUnicodeConnectorPunctuation(characterType)
                || c == ZWNJ_CODE
                || c == ZWJ_CODE;
    }

    private boolean isUnicodeConnectorPunctuation(int characterType) {
        return characterType == Character.CONNECTOR_PUNCTUATION;
    }

    private boolean isUnicodeDigit(int characterType) {
        return characterType == Character.DECIMAL_DIGIT_NUMBER;
    }

    private boolean isUnicodeCombiningMark(int characterType) {
        return characterType == Character.COMBINING_SPACING_MARK 
                || characterType == Character.NON_SPACING_MARK;
    }

    @Override
    public int hashCode() {
        return hash;
    }

    public String getName() {
        return identifierName.toString();
    }

    public ESString getESName() {
        return identifierName;
    }

    @Override
    public String toString() {
        return "<" + identifierName + ">";
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj instanceof ASTIdentifier) {
            ASTIdentifier other = (ASTIdentifier) obj;
            return this.identifierName.equals(other.identifierName);
        }
        return false;
    }
}
