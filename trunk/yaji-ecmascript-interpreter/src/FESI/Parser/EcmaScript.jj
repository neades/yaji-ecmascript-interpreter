/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. EcmaScript.jj */
/*@egen*//**
 * Copyright (C) 1998-2003 Jean-Marc Lugrin - all rights reserved.
 *
 * This file contains an EcmaScript grammar and actions that implement a front-end.
 * Reference to EcmaScript standard 262 June 1977 
 */

options {
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
  
  // We do our own Unicode escape pre-processing since EcmaScript does 
  // not permit escaped characters in all input.
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
  
                                                                      
                                              
             
                                                       
                                                                   
                                                        
                                                                       
                                                                          
                                                
                                                                      
                                                               
     
                          
             
                         
                            
               
                          // Used to save line number
}

PARSER_BEGIN(EcmaScript)
// $codepro.audit.disable
package FESI.Parser;
import FESI.AST.*;


import FESI.AST.*;
import FESI.Exceptions.SyntaxError;
import FESI.Interpreter.PackagedException;

@SuppressWarnings("all")
public class EcmaScript/*@bgen(jjtree)*/implements EcmaScriptTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTEcmaScriptState jjtree = new JJTEcmaScriptState();

/*@egen*/

  // Just for test
  public static void main(String args[]) {
    EcmaScript parser;
    if (args.length == 0) {
      System.out.println("FESI EcmaScript Parser:  Reading from standard input . . .");
      parser = new EcmaScript(System.in);
    } else if (args.length == 1) {
      System.out.println("FESI EcmaScript Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new EcmaScript(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("FESI EcmaScript Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("FESI EcmaScript Parser:  Usage is one of:");
      System.out.println("         java EcmaScript < inputfile");
      System.out.println("OR");
      System.out.println("         java EcmaScript inputfile");
      return;
    }
    try {
        // ASTProgram n = parser.Program();
        SimpleNode n = parser.Program();
		System.out.println("Dump using dump() routine of nodes");
		System.out.println("----------------------------------");
        n.dump("");
		System.out.println();
		System.out.println("Dump using visitor pattern");
		System.out.println("--------------------------");
        EcmaScriptVisitor v = new EcmaScriptDumpVisitor();
        n.jjtAccept(v, null);
     System.out.println("FESI EcmaScript parser:  EcmaScript program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("FESI EcmaScript parser:  Encountered errors during parse.");
    }
  }

   /**
    * Save the current line number for run-time error messages
    */
   void jjtreeOpenNodeScope(Node n)
    {
       Token t = getToken(1);
       if (t != null) {
           ((SimpleNode) n).setLinePosition(t.beginLine, t.beginColumn);
       }
    }

   /**
    * Dummy routine, required because NODE_SCOPE_HOOK is true
    */
    void jjtreeCloseNodeScope(Node n)
    {
    }

	public void setStrict(boolean strictMode) {
	   this.strictMode = strictMode;
	}

    private boolean strictMode = false;
    private boolean firstElement = true;
}
PARSER_END(EcmaScript)

/* WHITE SPACE - 7.2 */
<DEFAULT,NOREGEXP>
SKIP : 
{
	< TAB: 	"	" >
|   < VT: 	"\u000b" >
|   < FF: 	"" >
|   < SP: 	" " >
|   < NBSP: "\u00a0" >
|   < BOM:	"\ufeff" >
|   < USP: 
	[
        "\u1680", /* OGHAM SPACE MARK */
		"\u180e", /* MONGOLIAN VOWEL SEPARATOR */
		"\u2000", /* EN QUAD */
		"\u2001", /* EM QUAD */
		"\u2002", /* EN SPACE */
		"\u2003", /* EM SPACE */
		"\u2004", /* THREE-PER-EM SPACE */
		"\u2005", /* FOUR-PER-EM SPACE */
		"\u2006", /* SIX-PER-EM SPACE */
		"\u2007", /* FIGURE SPACE */
		"\u2008", /* PUNCTUATION SPACE */
		"\u2009", /* THIN SPACE */
		"\u200a", /* HAIR SPACE */
		"\u202f", /* NARROW NO-BREAK SPACE */
		"\u205f", /* MEDIUM MATHEMATICAL SPACE */
		"\u3000" /* IDEOGRAPHIC SPACE */
	] >
}

/* 7.3 - LINE TERMINATORS */
<DEFAULT,NOREGEXP>
SPECIAL_TOKEN : 
{
	< EOL: <CR>(<LF>)?|<LF>|<LS>|<PS> >
|   < #LF: "\n" >
|   < #CR: "\r" >
|   < #LS: "\u2028" >
|   < #PS: "\u2029" >
}

/* 7.4 - COMMENTS */
<DEFAULT,NOREGEXP>
SPECIAL_TOKEN : {
	< SINGLE_LINE_COMMENT: "//" (~["\n", "\r", "\u2028", "\u2029"])* >
}

<DEFAULT,NOREGEXP>
MORE :
{
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS EcmaScript 7.4 */

<DEFAULT,NOREGEXP>
TOKEN :
{
  < BREAK: "break" > : DEFAULT
| < CONTINUE: "continue" > : DEFAULT
| < DELETE: "delete" > : DEFAULT
| < ELSE: "else" > : DEFAULT
| < FOR: "for" > : DEFAULT
| < FUNCTION: "function" > : DEFAULT
| < IF: "if" > : DEFAULT
| < IN: "in" > : DEFAULT
| < NEW: "new" > : DEFAULT
| < RETURN: "return" > : DEFAULT
| < THIS: "this" > : DEFAULT
| < TYPEOF: "typeof" > : DEFAULT
| < VAR: "var" > : DEFAULT
| < VOID: "void" > : DEFAULT
| < WHILE: "while" > : DEFAULT
| < WITH: "with" > : DEFAULT


| < CASE: "case" > : DEFAULT
| < CATCH: "catch" > : DEFAULT
| < CLASS: "class" > : DEFAULT
| < CONST: "const" > : DEFAULT
| < DEBUGGER: "debugger" > : DEFAULT
| < _DEFAULT: "default" > : DEFAULT
| < DO: "do" > : DEFAULT
| < ENUM: "enum" > : DEFAULT
| < EXPORT: "export" > : DEFAULT
| < EXTENDS: "extends" > : DEFAULT
| < FINALLY: "finally" > : DEFAULT
| < IMPORT: "import" > : DEFAULT
| < SUPER: "super" > : DEFAULT
| < SWITCH: "switch" > : DEFAULT
| < THROW: "throw" > : DEFAULT
| < TRY: "try" > : DEFAULT
| < INSTANCEOF: "instanceof" > : DEFAULT

// They are not supposed to be keywords
| < TRUE: "true" > : DEFAULT
| < FALSE: "false" > : DEFAULT
| < NULL: "null" > : DEFAULT
| < GET: "get" > : DEFAULT
| < SET: "set" > : DEFAULT
}

/* LITERALS EcmaScript 7.7 
 * Decimal and floating point literals are recognized separately (to ease storing?)
 * FLoating points literals are too permissive (ONLY ONE LEADING ZERO ALLOWED)
 */

<DEFAULT,NOREGEXP>
TOKEN :
{
  < DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* > : NOREGEXP
|
  < HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ > : NOREGEXP
|
  < OCTAL_LITERAL: "0" (["0"-"7"])* > : NOREGEXP
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? 
      | "." (["0"-"9"])+ (<EXPONENT>)? 
      | (["0"-"9"])+ (<EXPONENT>)? 
  > : NOREGEXP
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
        "\""
        <DOUBLE_STRING_LITERAL_BODY>
        "\""
      | "'"
        <SINGLE_STRING_LITERAL_BODY>
        "'"
  > : NOREGEXP
|
  < #SINGLE_STRING_LITERAL_BODY:(   
          ( "\\" ~[ "\r" , "\n" , "\u2028" , "\u2029"] )
        | ("\\" ( "\r\n" | "\r" | "\n" | "\u2028" | "\u2029") )
        | (~["\'","\n","\r","\u2028","\u2029","\\"])
        )*
  >
|
  < #DOUBLE_STRING_LITERAL_BODY:(   
          ( "\\" ~[ "\r" , "\n" , "\u2028" , "\u2029"] )
        | ("\\" ( "\r\n" | "\r" | "\n" | "\u2028" | "\u2029") )
        | (~["\"","\n","\r","\u2028","\u2029", "\\"])
        )*
  >
|
  < UNTERMINATED_STRING_LITERAL:
        "\""
        <DOUBLE_STRING_LITERAL_BODY>
        (["\n","\r","\u2028","\u2029"])
      | "'"
        <SINGLE_STRING_LITERAL_BODY>
        (["\n","\r","\u2028","\u2029"])
  >
}

<DEFAULT>
TOKEN: {
  < REGULAR_EXPRESSION_LITERAL:
    "/"
    <REGULAR_EXPRESSION_BODY>
    "/"
    (<IDENTIFIER_PART>)*
  >
|
  <# REGULAR_EXPRESSION_BODY:
    <REGULAR_EXPRESSION_FIRST_CHAR> (<REGULAR_EXPRESSION_CHAR>)*
  >
| <# REGULAR_EXPRESSION_CHAR:
    ~[ "\r" , "\n" , "\u2028" , "\u2029", "\\", "/", "[" ]
    | <REGULAR_EXPRESSION_BACKSLASH_SEQUENCE>
    | <REGULAR_EXPRESSION_CLASS>
  >
| <# REGULAR_EXPRESSION_FIRST_CHAR: 
    ~[ "\r" , "\n" , "\u2028" , "\u2029", "*", "\\", "/", "[" ]
    | <REGULAR_EXPRESSION_BACKSLASH_SEQUENCE>
    | <REGULAR_EXPRESSION_CLASS>
  >
| <# REGULAR_EXPRESSION_BACKSLASH_SEQUENCE:
    "\\" ~[ "\r" , "\n" , "\u2028" , "\u2029" ]
  >
| <# REGULAR_EXPRESSION_CLASS:
    "[" (<REGULAR_EXPRESSION_CLASS_CHAR>)* "]"
  >
| <# REGULAR_EXPRESSION_CLASS_CHAR:
    ~[ "\r" , "\n" , "\u2028" , "\u2029", "\\", "]" ]
    | <REGULAR_EXPRESSION_BACKSLASH_SEQUENCE>
  >
}

/* IDENTIFIERS */

<DEFAULT,NOREGEXP>
TOKEN :
{
  < IDENTIFIER: <IDENTIFIER_START> (<IDENTIFIER_PART>)* > : NOREGEXP
|
  < #IDENTIFIER_START:
    	<UNICODE_LETTER>
    |
  	  	[
       	"$",
       	"_"
      	]
    |
    	<UNICODE_ESCAPE_SEQUENCE>
  >
|  
  < #IDENTIFIER_PART: 
		<IDENTIFIER_START>
	| 
		<UNICODE_COMBINING_MARK>  
	| 
	  	<UNICODE_DIGIT>
    | 
      	<UNICODE_CONNECTOR_PUNCTUATION>
    |
		<ZWNJ>
    |
   		<ZWJ> 
  >
|   
  < #UNICODE_LETTER: /* Unicode categories: Lu, Ll, Lt, Lm, Lo, Ni */
  		[
  	    "A"-"Z",
  	    "a"-"z",
  	    "\u00aa",
  	    "\u00b5",
  	   	"\u00ba",
  	    "\u00c0"-"\u00d6",
  	    "\u00d8"-"\u00f6",
  	    "\u00f8"-"\u021f",
  	    "\u0222"-"\u0233",
  	    "\u0250"-"\u02ad",
  	    "\u02b0"-"\u02b8",
  	    "\u02bb"-"\u02c1",
  	    "\u02d0"-"\u02d1",
  	    "\u02e0"-"\u02e4",
  	    "\u02ee",
  	    "\u037a",
  	    "\u0386",
  	    "\u0388"-"\u038a",
  	    "\u038c",
  	    "\u038e"-"\u03a1",
  	    "\u03a3"-"\u03ce",
  	    "\u03d0"-"\u03d7",
  	    "\u03da"-"\u03f3",
  	    "\u0400"-"\u0481",
  	    "\u048c"-"\u04c4",
  	    "\u04c7"-"\u04c8",
  	    "\u04cb"-"\u04cc",
  	    "\u04d0"-"\u04f5",
  	    "\u04f8"-"\u04f9",
  	    "\u0531"-"\u0556",
  	    "\u0559",
  	    "\u0561"-"\u0587",
  	    "\u05d0"-"\u05ea",
  	    "\u05f0"-"\u05f2",
  	    "\u0621"-"\u063a",
  	    "\u0640"-"\u064a",
  	    "\u0671"-"\u06d3",
  	    "\u06d5",
  	    "\u06e5"-"\u06e6",
  	    "\u06fa"-"\u06fc",
  	    "\u0710",
  	    "\u0712"-"\u072c",
  	    "\u0780"-"\u07a5",
  	    "\u0905"-"\u0939",
  	    "\u093d",
  	    "\u0950",
  	    "\u0958"-"\u0961",
  	    "\u0985"-"\u098c",
  	    "\u098f"-"\u0990",
  	    "\u0993"-"\u09a8",
  	    "\u09aa"-"\u09b0",
  	    "\u09b2",
  	    "\u09b6"-"\u09b9",
  	    "\u09dc"-"\u09dd",
  	    "\u09df"-"\u09e1",
  	    "\u09f0"-"\u09f1",
  	    "\u0a05"-"\u0a0a",
  	    "\u0a0f"-"\u0a10",
  	    "\u0a13"-"\u0a28",
  	    "\u0a2a"-"\u0a30",
  	    "\u0a32"-"\u0a33",
  	    "\u0a35"-"\u0a36",
  	    "\u0a38"-"\u0a39",
  	    "\u0a59"-"\u0a5c",
  	    "\u0a5e",
  	    "\u0a72"-"\u0a74",
  	    "\u0a85"-"\u0a8b",
  	    "\u0a8d",
  	    "\u0a8f"-"\u0a91",
  	    "\u0a93"-"\u0aa8",
  	    "\u0aaa"-"\u0ab0",
  	    "\u0ab2"-"\u0ab3",
  	    "\u0ab5"-"\u0ab9",
  	    "\u0abd",
  	    "\u0ad0",
  	    "\u0ae0",
  	    "\u0b05"-"\u0b0c",
  	    "\u0b0f"-"\u0b10",
  	    "\u0b13"-"\u0b28",
  	    "\u0b2a"-"\u0b30",
  	    "\u0b32"-"\u0b33",
  	    "\u0b36"-"\u0b39",
  	    "\u0b3d",
  	    "\u0b5c"-"\u0b5d",
  	    "\u0b5f"-"\u0b61",
  	    "\u0b85"-"\u0b8a",
  	    "\u0b8e"-"\u0b90",
  	    "\u0b92"-"\u0b95",
  	    "\u0b99"-"\u0b9a",
  	    "\u0b9c",
  	    "\u0b9e"-"\u0b9f",
  	    "\u0ba3"-"\u0ba4",
  	    "\u0ba8"-"\u0baa",
  	    "\u0bae"-"\u0bb5",
  	    "\u0bb7"-"\u0bb9",
  	    "\u0c05"-"\u0c0c",
  	    "\u0c0e"-"\u0c10",
  	    "\u0c12"-"\u0c28",
  	    "\u0c2a"-"\u0c33",
  	    "\u0c35"-"\u0c39",
  	    "\u0c60"-"\u0c61",
  	    "\u0c85"-"\u0c8c",
  	    "\u0c8e"-"\u0c90",
  	    "\u0c92"-"\u0ca8",
  	    "\u0caa"-"\u0cb3",
  	    "\u0cb5"-"\u0cb9",
  	    "\u0cde",
  	    "\u0ce0"-"\u0ce1",
  	    "\u0d05"-"\u0d0c",
  	    "\u0d0e"-"\u0d10",
  	    "\u0d12"-"\u0d28",
  	    "\u0d2a"-"\u0d39",
  	    "\u0d60"-"\u0d61",
  	    "\u0d85"-"\u0d96",
  	    "\u0d9a"-"\u0db1",
  	    "\u0db3"-"\u0dbb",
  	    "\u0dbd",
  	    "\u0dc0"-"\u0dc6",
  	    "\u0e01"-"\u0e30",
  	    "\u0e32"-"\u0e33",
  	    "\u0e40"-"\u0e46",
  	    "\u0e81"-"\u0e82",
  	    "\u0e84",
  	    "\u0e87"-"\u0e88",
  	    "\u0e8a",
  	    "\u0e8d",
  	    "\u0e94"-"\u0e97",
  	    "\u0e99"-"\u0e9f",
  	    "\u0ea1"-"\u0ea3",
  	    "\u0ea5",
  	    "\u0ea7",
  	    "\u0eaa"-"\u0eab",
  	    "\u0ead"-"\u0eb0",
  	    "\u0eb2"-"\u0eb3",
  	    "\u0ebd"-"\u0ec4",
  	    "\u0ec6",
  	    "\u0edc"-"\u0edd",
  	    "\u0f00",
  	    "\u0f40"-"\u0f6a",
  	    "\u0f88"-"\u0f8b",
  	    "\u1000"-"\u1021",
  	    "\u1023"-"\u1027",
  	    "\u1029"-"\u102a",
  	    "\u1050"-"\u1055",
  	    "\u10a0"-"\u10c5",
  	    "\u10d0"-"\u10f6",
  	    "\u1100"-"\u1159",
  	    "\u115f"-"\u11a2",
  	    "\u11a8"-"\u11f9",
  	    "\u1200"-"\u1206",
  	    "\u1208"-"\u1246",
  	    "\u1248",
		"\u124a"-"\u124d",
		"\u1250"-"\u1256",
		"\u1258",
		"\u125a"-"\u125d",
  	    "\u1260"-"\u1286",
  	    "\u1288",
  	    "\u128a"-"\u128d",
  	    "\u1290"-"\u12ae",
  	    "\u12b0",
  	    "\u12b2"-"\u12b5",
  	    "\u12b8"-"\u12be",
  	    "\u12c0",
  	    "\u12c2"-"\u12c5",
  	    "\u12c8"-"\u12ce",
  	    "\u12d0"-"\u12d6",
  	    "\u12d8"-"\u12ee",
		"\u12f0"-"\u130e",
  	    "\u1310",
  	    "\u1312"-"\u1315",
  	    "\u1318"-"\u131e",
  	    "\u1320"-"\u1346",
  	    "\u1348"-"\u135a",
  	    "\u13a0"-"\u13b0",
  	    "\u13b1"-"\u13f4",
  	    "\u1401"-"\u1676",
  	    "\u1681"-"\u169a",
  	    "\u16a0"-"\u16ea",
  	    "\u1780"-"\u17b3",
  	    "\u1820"-"\u1877",
  	    "\u1880"-"\u18a8",
  	    "\u1e00"-"\u1e9b",
  	    "\u1ea0"-"\u1ee0",
  	    "\u1ee1"-"\u1ef9",
  	    "\u1f00"-"\u1f15",
  	    "\u1f18"-"\u1f1d",
  	    "\u1f20"-"\u1f39",
  	    "\u1f3a"-"\u1f45",
  	    "\u1f48"-"\u1f4d",
  	    "\u1f50"-"\u1f57",
  	    "\u1f59",
  	    "\u1f5b",
  	    "\u1f5d",
  	    "\u1f5f"-"\u1f7d",
  	    "\u1f80"-"\u1fb4",
  	    "\u1fb6"-"\u1fbc",
  	    "\u1fbe",
  	    "\u1fc2"-"\u1fc4",
  	    "\u1fc6"-"\u1fcc",
  	    "\u1fd0"-"\u1fd3",
  	    "\u1fd6"-"\u1fdb",
  	    "\u1fe0"-"\u1fec",
  	    "\u1ff2"-"\u1ff4",
  	    "\u1ff6"-"\u1ffc",
  	    "\u207f",
  	    "\u2102",
  	    "\u2107",
  	    "\u210a"-"\u2113",
  	    "\u2115",
  	    "\u2119"-"\u211d",
  	    "\u2124",
  	    "\u2126",
  	    "\u2128",
  	    "\u212a"-"\u212d",
  	    "\u212f"-"\u2131",
  	    "\u2133"-"\u2139",
  	    "\u2160"-"\u2183",
  	    "\u3005"-"\u3007",
  	    "\u3021"-"\u3029",
  	    "\u3031"-"\u3035",
  	    "\u3038"-"\u303a",
  	    "\u3041"-"\u3094",
  	    "\u309d"-"\u309e",
  	    "\u30a1"-"\u30fa",
  	    "\u30fc"-"\u30fe",
  	    "\u3105"-"\u312c",
  	    "\u3131"-"\u318e",
  	    "\u31a0"-"\u31b7",
  	    "\u3400",
  	    "\u4db5",
  	    "\u4e00",
  	    "\u9fa5",
  	    "\ua000"-"\ua48c",
  	    "\uac00",
  	    "\ud7a3",
  	    "\uf900"-"\ufa2d",
  	    "\ufb00"-"\ufb06",
  	    "\ufb13"-"\ufb17",
  	    "\ufb1d",
  	    "\ufb1f"-"\ufb28",
  	    "\ufb2a"-"\ufb36",
  	    "\ufb38"-"\ufb3c",
  	    "\ufb3e",
  	    "\ufb40"-"\ufb41",
  	    "\ufb43"-"\ufb44",
  	    "\ufb46"-"\ufbb1",
  	    "\ufbd3"-"\ufd3d",
  	    "\ufd50"-"\ufd8f",
  	    "\ufd92"-"\ufdc7",
  	    "\ufdf0"-"\ufdfb",
  	    "\ufe70"-"\ufe72",
  	    "\ufe74",
  	    "\ufe76"-"\ufefc",
  	    "\uff21"-"\uff3a",
  	    "\uff41"-"\uff5a",
  	    "\uff66"-"\uffbe",
  	    "\uffc2"-"\uffc7",
  	    "\uffca"-"\uffcf",
  	    "\uffd2"-"\uffd7",
  	    "\uffda"-"\uffdc" 
  	    ] 
  >
|
  < #UNICODE_ESCAPE_SEQUENCE: "\\" "u" <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> >
|   
  < #UNICODE_COMBINING_MARK: /* Unicode categories: Mn, Mc */
  		[
        "\u0300"-"\u034e",
        "\u0360"-"\u0362",
        "\u0483"-"\u0486",
        "\u0591"-"\u05a1",
        "\u05a3"-"\u05b9",
        "\u05bb"-"\u05bd",
        "\u05bf",
        "\u05c1"-"\u05c2",
        "\u05c4",
        "\u064b"-"\u0655",
        "\u0670",
        "\u06d6"-"\u06dc",
        "\u06df"-"\u06e4",
        "\u06e7"-"\u06e8",
        "\u06ea"-"\u06ed",
        "\u0711",
        "\u0730"-"\u074a",
        "\u07a6"-"\u07b0",
        "\u0901"-"\u0903",
        "\u093c",
        "\u093e"-"\u094d",
        "\u0951"-"\u0954",
        "\u0962"-"\u0963",
        "\u0981"-"\u0983",
        "\u09bc"-"\u09c4",
        "\u09c7"-"\u09c8",
        "\u09cb"-"\u09cd",
        "\u09d7",
        "\u09e2"-"\u09e3",
        "\u0a02",
        "\u0a3c",
        "\u0a3e"-"\u0a42",
        "\u0a47"-"\u0a48",
        "\u0a4b"-"\u0a4d",
        "\u0a70"-"\u0a71",
        "\u0a81"-"\u0a83",
        "\u0abc",
        "\u0abe"-"\u0ac5",
        "\u0ac7"-"\u0ac9",
        "\u0acb"-"\u0acd",
        "\u0b01"-"\u0b03",
        "\u0b3c",
        "\u0b3e"-"\u0b43",
        "\u0b47"-"\u0b48",
        "\u0b4b"-"\u0b4d",
        "\u0b56"-"\u0b57",
        "\u0b82"-"\u0b83",
        "\u0bbe"-"\u0bc2",
        "\u0bc6"-"\u0bc8",
        "\u0bca"-"\u0bcd",
        "\u0bd7",
        "\u0c01"-"\u0c03",
        "\u0c3e"-"\u0c44",
        "\u0c46"-"\u0c48",
        "\u0c4a"-"\u0c4d",
        "\u0c55"-"\u0c56",
        "\u0c82"-"\u0c83",
        "\u0cbe"-"\u0cc4",
        "\u0cc6"-"\u0cc8",
        "\u0cca"-"\u0ccd",
        "\u0cd5"-"\u0cd6",
        "\u0d02"-"\u0d03",
        "\u0d3e"-"\u0d43",
        "\u0d46"-"\u0d48",
        "\u0d4a"-"\u0d4d",
        "\u0d57",
        "\u0d82"-"\u0d83",
        "\u0dca",
        "\u0dcf"-"\u0dd4",
        "\u0dd6",
        "\u0dd8"-"\u0ddf",
        "\u0df2"-"\u0df3",
        "\u0e31",
        "\u0e34"-"\u0e3a",
        "\u0e47"-"\u0e4e",
        "\u0eb1",
        "\u0eb4"-"\u0eb9",
        "\u0ebb"-"\u0ebc",
        "\u0ec8"-"\u0ecd",
        "\u0f18"-"\u0f19",
        "\u0f35",
        "\u0f37",
        "\u0f39",
        "\u0f3e"-"\u0f3f",
        "\u0f71"-"\u0f84",
        "\u0f86"-"\u0f87",
        "\u0f90"-"\u0f97",
        "\u0f99"-"\u0fbc",
        "\u0fc6",
        "\u102c"-"\u1032",
        "\u1036"-"\u1039",
        "\u1056"-"\u1059",
        "\u17b4"-"\u17d3",
        "\u18a9",
        "\u20d0"-"\u20dc",
        "\u20e1",
        "\u302a"-"\u302f",
        "\u3099"-"\u309a",
        "\ufb1e",
        "\ufe20"-"\ufe23" 
        ] 
  >
|    
  < #UNICODE_DIGIT: /* Unicode categories: Nd */
  		[
        "0"-"9",
        "\u0660"-"\u0669",
        "\u06f0"-"\u06f9",
        "\u0966"-"\u096f",
        "\u09e6"-"\u09ef",
        "\u0a66"-"\u0a6f",
        "\u0ae6"-"\u0aef",
        "\u0b66"-"\u0b6f",
        "\u0be7"-"\u0bef",
        "\u0c66"-"\u0c6f",
        "\u0ce6"-"\u0cef",
        "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59",
        "\u0ed0"-"\u0ed9",
        "\u0f20"-"\u0f29",
        "\u1040"-"\u1049",
        "\u1369"-"\u1371",
        "\u17e0"-"\u17e9",
        "\u1810"-"\u1819",
        "\uff10"-"\uff19" 
        ] 
  >
|
  < #UNICODE_CONNECTOR_PUNCTUATION: /* Unicode categories: Pc */
  		[
        "_",
		"\u203f"-"\u2040",
		"\u30fb",
		"\ufe33"-"\ufe34",
		"\ufe4d"-"\ufe4f",
        "\uff3f",
        "\uff65" 
        ] 
  >
|   
  < #ZWNJ: "\u200d"> /* Zero width joiner (ZWJ) */
| 
  < #ZWJ: "\u200c"> /* Zero width non-joiner (ZWNJ) */
}

<DEFAULT,NOREGEXP>
TOKEN : 
{
  < HEX_DIGIT: ["0"-"9"] | ["a"-"f"] | ["A"-"F"] >
}

/* SEPARATORS */
<DEFAULT,NOREGEXP>
TOKEN :
{
  < LPAREN: "(" > : DEFAULT
| < RPAREN: ")" > : NOREGEXP
| < LBRACE: "{" > : DEFAULT
| < RBRACE: "}" > : DEFAULT
| < LBRACKET: "[" > : DEFAULT
| < RBRACKET: "]" > : DEFAULT
| < SEMICOLON: ";" > : DEFAULT
| < COMMA: "," > : DEFAULT
| < DOT: "." > : DEFAULT
}

/* OPERATORS */
<DEFAULT,NOREGEXP>
TOKEN :
{
  < ASSIGN: "=" > : DEFAULT
| < GT: ">" > : DEFAULT
| < LT: "<" > : DEFAULT
| < BANG: "!" > : DEFAULT
| < TILDE: "~" > : DEFAULT
| < HOOK: "?" > : DEFAULT
| < COLON: ":" > : DEFAULT
| < STRICT_EQ: "===" > : DEFAULT
| < STRICT_NEQ: "!==" > : DEFAULT
| < EQ: "==" > : DEFAULT
| < LE: "<=" > : DEFAULT
| < GE: ">=" > : DEFAULT
| < NE: "!=" > : DEFAULT
| < SC_OR: "||" > : DEFAULT
| < SC_AND: "&&" > : DEFAULT
| < INCR: "++" > { if (matchedToken.specialToken != null && matchedToken.specialToken.kind == EOL) { matchedToken.kind = NL_INCR; } } : DEFAULT
| < NL_INCR: [ "\r" , "\n" , "\u2028" , "\u2029"] "++" > : DEFAULT
| < DECR: "--" > { if (matchedToken.specialToken != null && matchedToken.specialToken.kind == EOL) { matchedToken.kind = NL_DECR; } } : DEFAULT
| < NL_DECR: [ "\r" , "\n" , "\u2028" , "\u2029"] "--" > : DEFAULT
| < PLUS: "+" > : DEFAULT
| < MINUS: "-" > : DEFAULT
| < STAR: "*" > : DEFAULT
| < SLASH: "/" > : DEFAULT
| < BIT_AND: "&" > : DEFAULT
| < BIT_OR: "|" > : DEFAULT
| < XOR: "^" > : DEFAULT
| < REM: "%" > : DEFAULT
| < LSHIFT: "<<" > : DEFAULT
| < RSIGNEDSHIFT: ">>" > : DEFAULT
| < RUNSIGNEDSHIFT: ">>>" > : DEFAULT
| < PLUSASSIGN: "+=" > : DEFAULT
| < MINUSASSIGN: "-=" > : DEFAULT
| < STARASSIGN: "*=" > : DEFAULT
| < SLASHASSIGN: "/=" > : DEFAULT
| < ANDASSIGN: "&=" > : DEFAULT
| < ORASSIGN: "|=" > : DEFAULT
| < XORASSIGN: "^=" > : DEFAULT
| < REMASSIGN: "%=" > : DEFAULT
| < LSHIFTASSIGN: "<<=" > : DEFAULT
| < RSIGNEDSHIFTASSIGN: ">>=" > : DEFAULT
| < RUNSIGNEDSHIFTASSIGN: ">>>=" > : DEFAULT
}



void NumericLiteral()          :
{/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Literal */
  try {
/*@egen*/
  t = <DECIMAL_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setDecimalValue(t.image);
  }
|
  t = <OCTAL_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    if (strictMode && ! t.image.equals("0")) {
      throw new PackagedException(new SyntaxError("Octal literals are not allowed in Strict Mode"), jjtn000);
    }
    jjtn000.setOctalValue(t.image);
  }
|
  t = <HEX_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setHexValue(t.image);
  }
|
  t = <FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setFloatingPointValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void BooleanLiteral()          :
{/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Literal */
  try {
/*@egen*/
  t = <TRUE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setBooleanValue(true);
  }
|
  t = <FALSE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setBooleanValue(false);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void NullLiteral()          :
{/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Literal */
  try {
/*@egen*/
  t = <NULL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setNullValue();
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void RegexpLiteral()         :
{/*@bgen(jjtree) Regexp */
  ASTRegexp jjtn000 = new ASTRegexp(JJTREGEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Regexp */
  try {
/*@egen*/
  t = <REGULAR_EXPRESSION_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setRegularExpression(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Literal()       :
{
  Token t;
}
{
  NumericLiteral()
|
  StringLiteral()
|
  BooleanLiteral()
|
  NullLiteral()
|
  RegexpLiteral()
|
  t = <UNTERMINATED_STRING_LITERAL>
  {
       throw generateParseException();
  }
}

void Identifier()             :
{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  ( t=<IDENTIFIER>
  | t=<GET>
  | t=<SET> )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void IdentifierName()             :
{/*@bgen(jjtree) Identifier */
        ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	( t=<IDENTIFIER>
	| t=<BREAK>
    | t=<CONTINUE>
    | t=<DELETE>
    | t=<ELSE>
    | t=<FOR>
    | t=<FUNCTION>
    | t=<IF>
    | t=<IN>
    | t=<NEW>
    | t=<RETURN>
    | t=<THIS>
    | t=<TYPEOF>
    | t=<VAR>
    | t=<VOID>
    | t=<WHILE>
    | t=<WITH>
    | t=<CASE>
    | t=<CATCH>
    | t=<CLASS>
    | t=<CONST>
    | t=<DEBUGGER>
    | t=<_DEFAULT>
    | t=<DO>
    | t=<ENUM>
    | t=<EXPORT>
    | t=<EXTENDS>
    | t=<FINALLY>
    | t=<IMPORT>
    | t=<SUPER>
    | t=<SWITCH>
    | t=<THROW>
    | t=<TRY>
    | t=<INSTANCEOF>
    | t=<TRUE>
    | t=<FALSE>
    | t=<NULL>
    | t=<GET>
    | t=<SET> )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/	
}

/*---------------------------------------------*
 * THE ECMASCRIPT LANGUAGE GRAMMAR STARTS HERE *
 *---------------------------------------------*/

/*
 * Expression syntax follows - 11.1, 11.2
 */

void PrimaryExpression()       :
{}
{
    PrimaryExpressionInES() 
|   (/*@bgen(jjtree) #CompositeReference(> 1) */
      {
        ASTCompositeReference jjtn001 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      }
      try {
/*@egen*/ ( ObjectLiteral() ( PrimarySuffix() )* )/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
/*@egen*/                         )
|   (/*@bgen(jjtree) #CompositeReference(> 1) */
      {
        ASTCompositeReference jjtn002 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      }
      try {
/*@egen*/ ( FunctionExpression() ( PrimarySuffix() )* )/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
          jjtreeCloseNodeScope(jjtn002);
        }
      }
/*@egen*/                         )
}

void PrimaryExpressionInES()       :
{}
{
    (/*@bgen(jjtree) #CompositeReference(> 1) */
      {
        ASTCompositeReference jjtn003 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtreeOpenNodeScope(jjtn003);
      }
      try {
/*@egen*/ ( ( (/*@bgen(jjtree) ThisReference */
           {
             ASTThisReference jjtn001 = new ASTThisReference(JJTTHISREFERENCE);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
           }
           try {
/*@egen*/("this")/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
               jjtreeCloseNodeScope(jjtn001);
             }
           }
/*@egen*/               ) | (/*@bgen(jjtree) SuperReference */
                                       {
                                         ASTSuperReference jjtn002 = new ASTSuperReference(JJTSUPERREFERENCE);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
                                         jjtreeOpenNodeScope(jjtn002);
                                       }
                                       try {
/*@egen*/("super")/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002, true);
                                           jjtreeCloseNodeScope(jjtn002);
                                         }
                                       }
/*@egen*/                )) ( PrimarySuffix() )* )/*@bgen(jjtree)*/
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          throw (RuntimeException)jjte003;
        }
        if (jjte003 instanceof ParseException) {
          throw (ParseException)jjte003;
        }
        throw (Error)jjte003;
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
          jjtreeCloseNodeScope(jjtn003);
        }
      }
/*@egen*/                         )
|   (/*@bgen(jjtree) #CompositeReference(> 1) */
      {
        ASTCompositeReference jjtn004 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
        jjtreeOpenNodeScope(jjtn004);
      }
      try {
/*@egen*/ ( Identifier() ( PrimarySuffix() )* )/*@bgen(jjtree)*/
      } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          throw (RuntimeException)jjte004;
        }
        if (jjte004 instanceof ParseException) {
          throw (ParseException)jjte004;
        }
        throw (Error)jjte004;
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, jjtree.nodeArity() > 1);
          jjtreeCloseNodeScope(jjtn004);
        }
      }
/*@egen*/                         )
|	(/*@bgen(jjtree) #CompositeReference(> 1) */
          {
            ASTCompositeReference jjtn005 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
            jjtreeOpenNodeScope(jjtn005);
          }
          try {
/*@egen*/ ( Literal() ( PrimarySuffix() )* )/*@bgen(jjtree)*/
          } catch (Throwable jjte005) {
            if (jjtc005) {
              jjtree.clearNodeScope(jjtn005);
              jjtc005 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte005 instanceof RuntimeException) {
              throw (RuntimeException)jjte005;
            }
            if (jjte005 instanceof ParseException) {
              throw (ParseException)jjte005;
            }
            throw (Error)jjte005;
          } finally {
            if (jjtc005) {
              jjtree.closeNodeScope(jjtn005, jjtree.nodeArity() > 1);
              jjtreeCloseNodeScope(jjtn005);
            }
          }
/*@egen*/                         )
|	(/*@bgen(jjtree) #CompositeReference(> 1) */
          {
            ASTCompositeReference jjtn006 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
            jjtreeOpenNodeScope(jjtn006);
          }
          try {
/*@egen*/ ( "(" Expression() ")" ( PrimarySuffix() )* )/*@bgen(jjtree)*/
          } catch (Throwable jjte006) {
            if (jjtc006) {
              jjtree.clearNodeScope(jjtn006);
              jjtc006 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte006 instanceof RuntimeException) {
              throw (RuntimeException)jjte006;
            }
            if (jjte006 instanceof ParseException) {
              throw (ParseException)jjte006;
            }
            throw (Error)jjte006;
          } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006, jjtree.nodeArity() > 1);
              jjtreeCloseNodeScope(jjtn006);
            }
          }
/*@egen*/                         )
|/*@bgen(jjtree) #CompositeReference(> 1) */
        {
          ASTCompositeReference jjtn007 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
          jjtreeOpenNodeScope(jjtn007);
        }
        try {
/*@egen*/	AllocationExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte007) {
          if (jjtc007) {
            jjtree.clearNodeScope(jjtn007);
            jjtc007 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte007 instanceof RuntimeException) {
            throw (RuntimeException)jjte007;
          }
          if (jjte007 instanceof ParseException) {
            throw (ParseException)jjte007;
          }
          throw (Error)jjte007;
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn007);
          }
        }
/*@egen*/                         
|   (/*@bgen(jjtree) #CompositeReference(> 1) */
      {
        ASTCompositeReference jjtn008 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
        boolean jjtc008 = true;
        jjtree.openNodeScope(jjtn008);
        jjtreeOpenNodeScope(jjtn008);
      }
      try {
/*@egen*/ ( ArrayLiteral() ( PrimarySuffix() )* )/*@bgen(jjtree)*/
      } catch (Throwable jjte008) {
        if (jjtc008) {
          jjtree.clearNodeScope(jjtn008);
          jjtc008 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte008 instanceof RuntimeException) {
          throw (RuntimeException)jjte008;
        }
        if (jjte008 instanceof ParseException) {
          throw (ParseException)jjte008;
        }
        throw (Error)jjte008;
      } finally {
        if (jjtc008) {
          jjtree.closeNodeScope(jjtn008, jjtree.nodeArity() > 1);
          jjtreeCloseNodeScope(jjtn008);
        }
      }
/*@egen*/                         )
}

void FunctionExpression()                     :
{/*@bgen(jjtree) FunctionExpression */
   ASTFunctionExpression jjtn000 = new ASTFunctionExpression(JJTFUNCTIONEXPRESSION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
/*@egen*/
   Token t1 = getToken(1); // 0 is the last matched token, so use 1 to get
                           // the next one.
   Token t2;
}
{/*@bgen(jjtree) FunctionExpression */
   try {
/*@egen*/
   try {
    "function" [ Identifier() ]/*@bgen(jjtree) #FormalParameterList( jjtree . nodeArity ( ) == 0) */
                                 {
                                   ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                   jjtreeOpenNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*/  ( "(" [ FormalParameterList() ] ")" )/*@bgen(jjtree)*/
                                 } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte001;
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     throw (ParseException)jjte001;
                                   }
                                   throw (Error)jjte001;
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
                                     jjtreeCloseNodeScope(jjtn001);
                                   }
                                 }
/*@egen*/                                             Block()
   }
   finally {
      t2 = getToken(0);
      StringBuffer sourceString = new StringBuffer("");

      // test special case for empty production
      if (t2.next != t1) { // Something consumed.
    
          for(; t1 != t2; t1 = t1.next)
          {
             if (t1.specialToken != null) {
                 sourceString.append(t1.specialToken.image); // last special token
             }
             sourceString.append(t1.image);
             sourceString.append(" ");
          }
      }
      sourceString.append(t2.image);
      jjtn000.setSourceString(sourceString.toString());
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}

void PrimarySuffix()       :
{}
{
	(/*@bgen(jjtree) FunctionCallParameters */
          {
            ASTFunctionCallParameters jjtn001 = new ASTFunctionCallParameters(JJTFUNCTIONCALLPARAMETERS);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
          }
          try {
/*@egen*/ ( Arguments() )/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtreeCloseNodeScope(jjtn001);
            }
          }
/*@egen*/                         )
| 	(/*@bgen(jjtree) PropertyValueReference */
          {
            ASTPropertyValueReference jjtn002 = new ASTPropertyValueReference(JJTPROPERTYVALUEREFERENCE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          }
          try {
/*@egen*/ ( "[" Expression() "]" )/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtreeCloseNodeScope(jjtn002);
            }
          }
/*@egen*/                         )
| 	(/*@bgen(jjtree) PropertyIdentifierReference */
          {
            ASTPropertyIdentifierReference jjtn003 = new ASTPropertyIdentifierReference(JJTPROPERTYIDENTIFIERREFERENCE);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtreeOpenNodeScope(jjtn003);
          }
          try {
/*@egen*/ ( "." IdentifierName() )/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
              jjtreeCloseNodeScope(jjtn003);
            }
          }
/*@egen*/                               )
}



void Arguments()       :
{}
{
	"(" [ ArgumentList() ] ")"
}

void ArgumentList()       :
{}
{
	AssignmentExpression() ( "," AssignmentExpression() )*
}

// ISSUE - New is more flexible, see SYNTAX
void NewSuffix()       :
{}
{
    (/*@bgen(jjtree) PropertyIdentifierReference */
      {
        ASTPropertyIdentifierReference jjtn001 = new ASTPropertyIdentifierReference(JJTPROPERTYIDENTIFIERREFERENCE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      }
      try {
/*@egen*/ ( "." Identifier() )/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
/*@egen*/                               )
| 	(/*@bgen(jjtree) PropertyValueReference */
          {
            ASTPropertyValueReference jjtn002 = new ASTPropertyValueReference(JJTPROPERTYVALUEREFERENCE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          }
          try {
/*@egen*/ ( "[" Expression() "]" )/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtreeCloseNodeScope(jjtn002);
            }
          }
/*@egen*/                         )
}

void AllocationExpression()       :
{
    java.util.ArrayList<Node> stack;
}
{
    { stack = new java.util.ArrayList<Node>(); }
    "new" ( 
           (
            (/*@bgen(jjtree) #CompositeReference(> 1) */
             {
               ASTCompositeReference jjtn002 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
             }
             try {
/*@egen*/
             ( (/*@bgen(jjtree) ThisReference */
                 {
                   ASTThisReference jjtn001 = new ASTThisReference(JJTTHISREFERENCE);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtreeOpenNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ ("this")/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtreeCloseNodeScope(jjtn001);
                   }
                 }
/*@egen*/                ) ( NewSuffix() )* )/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                 jjtreeCloseNodeScope(jjtn002);
               }
             }
/*@egen*/                         
            )/*@bgen(jjtree) #AllocationExpression( 2) */
            {
              ASTAllocationExpression jjtn005 = new ASTAllocationExpression(JJTALLOCATIONEXPRESSION);
              boolean jjtc005 = true;
              jjtree.openNodeScope(jjtn005);
              jjtreeOpenNodeScope(jjtn005);
            }
            try {
/*@egen*/ 
            (/*@bgen(jjtree) #FunctionCallParameters( jjtree . nodeArity ( ) == 0) */
             {
               ASTFunctionCallParameters jjtn004 = new ASTFunctionCallParameters(JJTFUNCTIONCALLPARAMETERS);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
               jjtreeOpenNodeScope(jjtn004);
             }
             try {
/*@egen*/ 
             (
              (/*@bgen(jjtree) FunctionCallParameters */
                {
                  ASTFunctionCallParameters jjtn003 = new ASTFunctionCallParameters(JJTFUNCTIONCALLPARAMETERS);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                  jjtreeOpenNodeScope(jjtn003);
                }
                try {
/*@egen*/ Arguments()/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtreeCloseNodeScope(jjtn003);
                  }
                }
/*@egen*/                         ) ( PrimarySuffix() {  stack.add(jjtree.popNode()); } )* 
             )?/*@bgen(jjtree)*/
             } catch (Throwable jjte004) {
               if (jjtc004) {
                 jjtree.clearNodeScope(jjtn004);
                 jjtc004 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte004 instanceof RuntimeException) {
                 throw (RuntimeException)jjte004;
               }
               if (jjte004 instanceof ParseException) {
                 throw (ParseException)jjte004;
               }
               throw (Error)jjte004;
             } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004,  jjtree . nodeArity ( ) == 0);
                 jjtreeCloseNodeScope(jjtn004);
               }
             }
/*@egen*/                                                    
            )/*@bgen(jjtree)*/
            } catch (Throwable jjte005) {
              if (jjtc005) {
                jjtree.clearNodeScope(jjtn005);
                jjtc005 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte005 instanceof RuntimeException) {
                throw (RuntimeException)jjte005;
              }
              if (jjte005 instanceof ParseException) {
                throw (ParseException)jjte005;
              }
              throw (Error)jjte005;
            } finally {
              if (jjtc005) {
                jjtree.closeNodeScope(jjtn005,  2);
                jjtreeCloseNodeScope(jjtn005);
              }
            }
/*@egen*/
                                      
           )
         |/*@bgen(jjtree) #AllocationExpression( 2) */
           {
             ASTAllocationExpression jjtn009 = new ASTAllocationExpression(JJTALLOCATIONEXPRESSION);
             boolean jjtc009 = true;
             jjtree.openNodeScope(jjtn009);
             jjtreeOpenNodeScope(jjtn009);
           }
           try {
/*@egen*/ (
            (/*@bgen(jjtree) #CompositeReference(> 1) */
              {
                ASTCompositeReference jjtn006 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
                boolean jjtc006 = true;
                jjtree.openNodeScope(jjtn006);
                jjtreeOpenNodeScope(jjtn006);
              }
              try {
/*@egen*/ ( ( Identifier() | Literal() ) ( NewSuffix() )* )/*@bgen(jjtree)*/
              } catch (Throwable jjte006) {
                if (jjtc006) {
                  jjtree.clearNodeScope(jjtn006);
                  jjtc006 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte006 instanceof RuntimeException) {
                  throw (RuntimeException)jjte006;
                }
                if (jjte006 instanceof ParseException) {
                  throw (ParseException)jjte006;
                }
                throw (Error)jjte006;
              } finally {
                if (jjtc006) {
                  jjtree.closeNodeScope(jjtn006, jjtree.nodeArity() > 1);
                  jjtreeCloseNodeScope(jjtn006);
                }
              }
/*@egen*/                         )/*@bgen(jjtree) #FunctionCallParameters( jjtree . nodeArity ( ) == 0) */
            {
              ASTFunctionCallParameters jjtn008 = new ASTFunctionCallParameters(JJTFUNCTIONCALLPARAMETERS);
              boolean jjtc008 = true;
              jjtree.openNodeScope(jjtn008);
              jjtreeOpenNodeScope(jjtn008);
            }
            try {
/*@egen*/
            ( 
             ( 
              (/*@bgen(jjtree) FunctionCallParameters */
               {
                 ASTFunctionCallParameters jjtn007 = new ASTFunctionCallParameters(JJTFUNCTIONCALLPARAMETERS);
                 boolean jjtc007 = true;
                 jjtree.openNodeScope(jjtn007);
                 jjtreeOpenNodeScope(jjtn007);
               }
               try {
/*@egen*/Arguments()/*@bgen(jjtree)*/
               } catch (Throwable jjte007) {
                 if (jjtc007) {
                   jjtree.clearNodeScope(jjtn007);
                   jjtc007 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte007 instanceof RuntimeException) {
                   throw (RuntimeException)jjte007;
                 }
                 if (jjte007 instanceof ParseException) {
                   throw (ParseException)jjte007;
                 }
                 throw (Error)jjte007;
               } finally {
                 if (jjtc007) {
                   jjtree.closeNodeScope(jjtn007, true);
                   jjtreeCloseNodeScope(jjtn007);
                 }
               }
/*@egen*/                        ) ( PrimarySuffix() {  stack.add(jjtree.popNode()); } )* 
             ) 
            )?/*@bgen(jjtree)*/
            } catch (Throwable jjte008) {
              if (jjtc008) {
                jjtree.clearNodeScope(jjtn008);
                jjtc008 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte008 instanceof RuntimeException) {
                throw (RuntimeException)jjte008;
              }
              if (jjte008 instanceof ParseException) {
                throw (ParseException)jjte008;
              }
              throw (Error)jjte008;
            } finally {
              if (jjtc008) {
                jjtree.closeNodeScope(jjtn008,  jjtree . nodeArity ( ) == 0);
                jjtreeCloseNodeScope(jjtn008);
              }
            }
/*@egen*/                                                    
           )/*@bgen(jjtree)*/
           } catch (Throwable jjte009) {
             if (jjtc009) {
               jjtree.clearNodeScope(jjtn009);
               jjtc009 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte009 instanceof RuntimeException) {
               throw (RuntimeException)jjte009;
             }
             if (jjte009 instanceof ParseException) {
               throw (ParseException)jjte009;
             }
             throw (Error)jjte009;
           } finally {
             if (jjtc009) {
               jjtree.closeNodeScope(jjtn009,  2);
               jjtreeCloseNodeScope(jjtn009);
             }
           }
/*@egen*/
                                     
         |/*@bgen(jjtree) #AllocationExpression( 2) */
           {
             ASTAllocationExpression jjtn012 = new ASTAllocationExpression(JJTALLOCATIONEXPRESSION);
             boolean jjtc012 = true;
             jjtree.openNodeScope(jjtn012);
             jjtreeOpenNodeScope(jjtn012);
           }
           try {
/*@egen*/ ( "(" Expression() ")"/*@bgen(jjtree) #FunctionCallParameters( jjtree . nodeArity ( ) == 0) */
            {
              ASTFunctionCallParameters jjtn011 = new ASTFunctionCallParameters(JJTFUNCTIONCALLPARAMETERS);
              boolean jjtc011 = true;
              jjtree.openNodeScope(jjtn011);
              jjtreeOpenNodeScope(jjtn011);
            }
            try {
/*@egen*/
            ( 
             ( 
              (/*@bgen(jjtree) FunctionCallParameters */
               {
                 ASTFunctionCallParameters jjtn010 = new ASTFunctionCallParameters(JJTFUNCTIONCALLPARAMETERS);
                 boolean jjtc010 = true;
                 jjtree.openNodeScope(jjtn010);
                 jjtreeOpenNodeScope(jjtn010);
               }
               try {
/*@egen*/Arguments()/*@bgen(jjtree)*/
               } catch (Throwable jjte010) {
                 if (jjtc010) {
                   jjtree.clearNodeScope(jjtn010);
                   jjtc010 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte010 instanceof RuntimeException) {
                   throw (RuntimeException)jjte010;
                 }
                 if (jjte010 instanceof ParseException) {
                   throw (ParseException)jjte010;
                 }
                 throw (Error)jjte010;
               } finally {
                 if (jjtc010) {
                   jjtree.closeNodeScope(jjtn010, true);
                   jjtreeCloseNodeScope(jjtn010);
                 }
               }
/*@egen*/                        ) ( PrimarySuffix() {  stack.add(jjtree.popNode()); } )* ) 
             )?/*@bgen(jjtree)*/
            } catch (Throwable jjte011) {
              if (jjtc011) {
                jjtree.clearNodeScope(jjtn011);
                jjtc011 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte011 instanceof RuntimeException) {
                throw (RuntimeException)jjte011;
              }
              if (jjte011 instanceof ParseException) {
                throw (ParseException)jjte011;
              }
              throw (Error)jjte011;
            } finally {
              if (jjtc011) {
                jjtree.closeNodeScope(jjtn011,  jjtree . nodeArity ( ) == 0);
                jjtreeCloseNodeScope(jjtn011);
              }
            }
/*@egen*/                                                    
           )/*@bgen(jjtree)*/
           } catch (Throwable jjte012) {
             if (jjtc012) {
               jjtree.clearNodeScope(jjtn012);
               jjtc012 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte012 instanceof RuntimeException) {
               throw (RuntimeException)jjte012;
             }
             if (jjte012 instanceof ParseException) {
               throw (ParseException)jjte012;
             }
             throw (Error)jjte012;
           } finally {
             if (jjtc012) {
               jjtree.closeNodeScope(jjtn012,  2);
               jjtreeCloseNodeScope(jjtn012);
             }
           }
/*@egen*/                           
          |/*@bgen(jjtree) AllocationExpression */
            {
              ASTAllocationExpression jjtn013 = new ASTAllocationExpression(JJTALLOCATIONEXPRESSION);
              boolean jjtc013 = true;
              jjtree.openNodeScope(jjtn013);
              jjtreeOpenNodeScope(jjtn013);
            }
            try {
/*@egen*/ AllocationExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte013) {
              if (jjtc013) {
                jjtree.clearNodeScope(jjtn013);
                jjtc013 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte013 instanceof RuntimeException) {
                throw (RuntimeException)jjte013;
              }
              if (jjte013 instanceof ParseException) {
                throw (ParseException)jjte013;
              }
              throw (Error)jjte013;
            } finally {
              if (jjtc013) {
                jjtree.closeNodeScope(jjtn013, true);
                jjtreeCloseNodeScope(jjtn013);
              }
            }
/*@egen*/                       
          )
    {
      for( Node node : stack ) {
        jjtree.pushNode(node);
      }
    }
}

	
// ES5 -11.1.4 Array Initialiser
void ArrayLiteral()               : 
{/*@bgen(jjtree) ArrayLiteral */
  ASTArrayLiteral jjtn000 = new ASTArrayLiteral(JJTARRAYLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ArrayLiteral */
   try {
/*@egen*/
   "["/*@bgen(jjtree) #Elision( jjtree . nodeArity ( ) == 0) */
     {
       ASTElision jjtn001 = new ASTElision(JJTELISION);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtreeOpenNodeScope(jjtn001);
     }
     try {
/*@egen*/
     [ AssignmentExpression() ]/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
         jjtreeCloseNodeScope(jjtn001);
       }
     }
/*@egen*/                                       ( ","/*@bgen(jjtree) #Elision( jjtree . nodeArity ( ) == 0) */
                                                                            {
                                                                              ASTElision jjtn002 = new ASTElision(JJTELISION);
                                                                              boolean jjtc002 = true;
                                                                              jjtree.openNodeScope(jjtn002);
                                                                              jjtreeOpenNodeScope(jjtn002);
                                                                            }
                                                                            try {
/*@egen*/ [ AssignmentExpression() ]/*@bgen(jjtree)*/
                                                                            } catch (Throwable jjte002) {
                                                                              if (jjtc002) {
                                                                                jjtree.clearNodeScope(jjtn002);
                                                                                jjtc002 = false;
                                                                              } else {
                                                                                jjtree.popNode();
                                                                              }
                                                                              if (jjte002 instanceof RuntimeException) {
                                                                                throw (RuntimeException)jjte002;
                                                                              }
                                                                              if (jjte002 instanceof ParseException) {
                                                                                throw (ParseException)jjte002;
                                                                              }
                                                                              throw (Error)jjte002;
                                                                            } finally {
                                                                              if (jjtc002) {
                                                                                jjtree.closeNodeScope(jjtn002,  jjtree . nodeArity ( ) == 0);
                                                                                jjtreeCloseNodeScope(jjtn002);
                                                                              }
                                                                            }
/*@egen*/                                     )*
   "]"/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}

// ES5 -11.1.5 Object Initializer

void ObjectLiteral()                :
{/*@bgen(jjtree) ObjectLiteral */
  ASTObjectLiteral jjtn000 = new ASTObjectLiteral(JJTOBJECTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ObjectLiteral */
    try {
/*@egen*/
    "{"
	( PropertyNameAndValueList() )?
	"}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void PropertyNameAndValueList()       :
{
}
{
	PropertyAssignment() [ "," [ PropertyNameAndValueList() ] ] 
}

void PropertyAssignment()                       :
{/*@bgen(jjtree) PropertyNameAndValue */
  ASTPropertyNameAndValue jjtn000 = new ASTPropertyNameAndValue(JJTPROPERTYNAMEANDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) PropertyNameAndValue */
        try {
/*@egen*/
	
	LOOKAHEAD(<GET> PropertyName())/*@bgen(jjtree) GetAccessor */
                                        {
                                          ASTGetAccessor jjtn001 = new ASTGetAccessor(JJTGETACCESSOR);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                          jjtreeOpenNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*/ <GET>/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001, true);
                                            jjtreeCloseNodeScope(jjtn001);
                                          }
                                        }
/*@egen*/              PropertyName() "(" ")" Block()
	| LOOKAHEAD(<SET> PropertyName())/*@bgen(jjtree) SetAccessor */
                                          {
                                            ASTSetAccessor jjtn002 = new ASTSetAccessor(JJTSETACCESSOR);
                                            boolean jjtc002 = true;
                                            jjtree.openNodeScope(jjtn002);
                                            jjtreeOpenNodeScope(jjtn002);
                                          }
                                          try {
/*@egen*/ <SET>/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc002) {
                                              jjtree.closeNodeScope(jjtn002, true);
                                              jjtreeCloseNodeScope(jjtn002);
                                            }
                                          }
/*@egen*/              PropertyName() "(" Identifier() ")" Block()
	| PropertyName() ":" AssignmentExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void PropertyName()       :
{
}
{
	( IdentifierName()
	| StringLiteral()
	| NumericLiteral() )
}

void StringLiteral()          : 
{/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Literal */
  try {
/*@egen*/
  t = <STRING_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    String value = t.image.substring(1,t.image.length()-1);
    if (firstElement && value.equals("use strict")) {
    	strictMode = true;
    }
    jjtn000.setStringValue(value,strictMode);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

// Expressions - 11.3 -11.13

void PostfixOp()           :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  ( <INCR> | <DECR> )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setOperator(getToken(0).kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}
void PostfixExpression()                        :
{/*@bgen(jjtree) #PostfixExpression(> 1) */
  ASTPostfixExpression jjtn000 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #PostfixExpression(> 1) */
        try {
/*@egen*/
	PrimaryExpression()  [ PostfixOp() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/ 
}


void PostfixExpressionInES()                        :
{/*@bgen(jjtree) #PostfixExpression(> 1) */
  ASTPostfixExpression jjtn000 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #PostfixExpression(> 1) */
        try {
/*@egen*/
	PrimaryExpressionInES()  [ PostfixOp() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/ 
}


void UnaryOp()           :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/ 
  ( "delete" | "void" | "typeof" | <INCR> | <NL_INCR> | <DECR> | <NL_DECR> | "+" | "-" | "~" | "!" )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setOperator(getToken(0).kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}
void UnaryExpression()                      :
{/*@bgen(jjtree) #UnaryExpression(> 1) */
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #UnaryExpression(> 1) */
        try {
/*@egen*/ 
	PostfixExpression()
|	UnaryOp() UnaryExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void UnaryExpressionInES()                      :
{/*@bgen(jjtree) #UnaryExpression(> 1) */
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #UnaryExpression(> 1) */
        try {
/*@egen*/ 
	PostfixExpressionInES()
|	UnaryOp() UnaryExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}



void MulOp()           :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  ( "*" | "/" | "%" )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setOperator(getToken(0).kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void MultiplicativeExpression()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/  
	UnaryExpression() (MulOp() UnaryExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
} 

void MultiplicativeExpressionInES()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/  
	UnaryExpressionInES() (MulOp() UnaryExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
} 


void AddOp()           :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  ( "+" | "-" )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setOperator(getToken(0).kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void AdditiveExpression()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	MultiplicativeExpression()( AddOp() MultiplicativeExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
} 

void AdditiveExpressionInES()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	MultiplicativeExpressionInES()( AddOp() MultiplicativeExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
} 



void ShiftOp()           :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  ( "<<" | ">>" | ">>>" )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/ 
  {
    jjtn000.setOperator(getToken(0).kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}
void ShiftExpression()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	AdditiveExpression()( ShiftOp() AdditiveExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ShiftExpressionInES()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	AdditiveExpressionInES()( ShiftOp() AdditiveExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}



void RelOp()           :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  ( "<" | ">" | "<=" | ">=" | <IN> | <INSTANCEOF>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/ 
  {
    jjtn000.setOperator(getToken(0).kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void RelOpNoIn()           :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  ( "<" | ">" | "<=" | ">=" | <INSTANCEOF>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/ 
  {
    jjtn000.setOperator(getToken(0).kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void RelationalExpression()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	ShiftExpression() ( RelOp() ShiftExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void RelationalExpressionNoIn()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	ShiftExpression() ( RelOpNoIn() ShiftExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void RelationalExpressionInES()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	ShiftExpressionInES() ( RelOp() ShiftExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}



void EqualOp()           :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  ( <EQ> | <NE> | <STRICT_EQ> | <STRICT_NEQ> )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setOperator(getToken(0).kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void EqualityExpression()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	RelationalExpression() ( EqualOp() RelationalExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/  
}

void EqualityExpressionNoIn()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	RelationalExpressionNoIn() ( EqualOp() RelationalExpressionNoIn() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/  
}

void EqualityExpressionInES()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	RelationalExpressionInES() ( EqualOp() RelationalExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/  
}



void BitwiseANDOp()           :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  "&"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setOperator(getToken(0).kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void BitwiseANDExpression()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	EqualityExpression() ( BitwiseANDOp() EqualityExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void BitwiseANDExpressionNoIn()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	EqualityExpressionNoIn() ( BitwiseANDOp() EqualityExpressionNoIn() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void BitwiseANDExpressionInES()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	EqualityExpressionInES() ( BitwiseANDOp() EqualityExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}



void BitwiseXOROp()           :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  "^"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setOperator(getToken(0).kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}
void BitwiseXORExpression()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	BitwiseANDExpression() ( BitwiseXOROp() BitwiseANDExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void BitwiseXORExpressionNoIn()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	BitwiseANDExpressionNoIn() ( BitwiseXOROp() BitwiseANDExpressionNoIn() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}


void BitwiseXORExpressionInES()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	BitwiseANDExpressionInES() ( BitwiseXOROp() BitwiseANDExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}



void BitwiseOROp()           :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  "|"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setOperator(getToken(0).kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}
void BitwiseORExpression()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	BitwiseXORExpression() ( BitwiseOROp() BitwiseXORExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void BitwiseORExpressionNoIn()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	BitwiseXORExpressionNoIn() ( BitwiseOROp() BitwiseXORExpressionNoIn() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void BitwiseORExpressionInES()                               :
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
        try {
/*@egen*/
	BitwiseXORExpressionInES() ( BitwiseOROp() BitwiseXORExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}




void LogicalANDExpression()                            :
{/*@bgen(jjtree) #AndExpressionSequence(> 1) */
  ASTAndExpressionSequence jjtn000 = new ASTAndExpressionSequence(JJTANDEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AndExpressionSequence(> 1) */
        try {
/*@egen*/
	BitwiseORExpression() ( "&&" BitwiseORExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void LogicalANDExpressionNoIn()                            :
{/*@bgen(jjtree) #AndExpressionSequence(> 1) */
  ASTAndExpressionSequence jjtn000 = new ASTAndExpressionSequence(JJTANDEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AndExpressionSequence(> 1) */
        try {
/*@egen*/
	BitwiseORExpressionNoIn() ( "&&" BitwiseORExpressionNoIn() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void LogicalANDExpressionInES()                            :
{/*@bgen(jjtree) #AndExpressionSequence(> 1) */
  ASTAndExpressionSequence jjtn000 = new ASTAndExpressionSequence(JJTANDEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AndExpressionSequence(> 1) */
        try {
/*@egen*/
	BitwiseORExpressionInES() ( "&&" BitwiseORExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}



void LogicalORExpression()                           :
{/*@bgen(jjtree) #OrExpressionSequence(> 1) */
  ASTOrExpressionSequence jjtn000 = new ASTOrExpressionSequence(JJTOREXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #OrExpressionSequence(> 1) */
        try {
/*@egen*/
	LogicalANDExpression() ( "||" LogicalANDExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void LogicalORExpressionNoIn()                           :
{/*@bgen(jjtree) #OrExpressionSequence(> 1) */
  ASTOrExpressionSequence jjtn000 = new ASTOrExpressionSequence(JJTOREXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #OrExpressionSequence(> 1) */
        try {
/*@egen*/
	LogicalANDExpressionNoIn() ( "||" LogicalANDExpressionNoIn() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void LogicalORExpressionInES()                           :
{/*@bgen(jjtree) #OrExpressionSequence(> 1) */
  ASTOrExpressionSequence jjtn000 = new ASTOrExpressionSequence(JJTOREXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #OrExpressionSequence(> 1) */
        try {
/*@egen*/
	LogicalANDExpressionInES() ( "||" LogicalANDExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}



void ConditionalExpression()                            :
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
        try {
/*@egen*/
	LogicalORExpression() [ "?" Expression() ":" ConditionalExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ConditionalExpressionNoIn()                            :
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
        try {
/*@egen*/
	LogicalORExpressionNoIn() [ "?" ExpressionNoIn() ":" ConditionalExpressionNoIn() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ConditionalExpressionInES()                            :
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
        try {
/*@egen*/
	LogicalORExpressionInES() [ "?" Expression() ":" ConditionalExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

// Must check that ConditionalExpression is an LVALUE if assignement used
// Maybe in runtime ?
void AssignementOperator()           :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
    try {
/*@egen*/
    ( "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setOperator(getToken(0).kind);  
  }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}
void AssignmentExpression()                           :
{/*@bgen(jjtree) #AssignmentExpression(> 1) */
  ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AssignmentExpression(> 1) */
        try {
/*@egen*/
	ConditionalExpression() 
	[
	    AssignementOperator() AssignmentExpression()
	]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void AssignmentExpressionNoIn()                           :
{/*@bgen(jjtree) #AssignmentExpression(> 1) */
  ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AssignmentExpression(> 1) */
        try {
/*@egen*/
	ConditionalExpressionNoIn() 
	[
	    AssignementOperator() AssignmentExpressionNoIn()
	]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void AssignmentExpressionInES()                           :
{/*@bgen(jjtree) #AssignmentExpression(> 1) */
  ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AssignmentExpression(> 1) */
        try {
/*@egen*/
	ConditionalExpressionInES() 
	[
	    AssignementOperator() AssignmentExpression()
	]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

// Check that priority is ok, check with assigment
void Expression()                     :
{/*@bgen(jjtree) #ExpressionList(> 1) */
  ASTExpressionList jjtn000 = new ASTExpressionList(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ExpressionList(> 1) */
        try {
/*@egen*/
	AssignmentExpression() ( "," AssignmentExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
	// AssignmentExpression() 
}		

void ExpressionNoIn()                     :
{/*@bgen(jjtree) #ExpressionList(> 1) */
  ASTExpressionList jjtn000 = new ASTExpressionList(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ExpressionList(> 1) */
        try {
/*@egen*/
	AssignmentExpressionNoIn() ( "," AssignmentExpressionNoIn() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}		

// Check that priority is ok, check with assigment
void ExpressionInES()                     :
{/*@bgen(jjtree) #ExpressionList(> 1) */
  ASTExpressionList jjtn000 = new ASTExpressionList(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ExpressionList(> 1) */
        try {
/*@egen*/
	AssignmentExpressionInES() ( "," AssignmentExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
	// AssignmentExpression() 
}		


/*
 * Statement syntax - 12
 */
 
 /*
  * Statement declaration syntax follows.
  */
 void Statement()            :
 {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) Statement */
        try {
/*@egen*/
 	Block()
 | 	VariableStatement()
 |	EmptyStatement()
 |	ExpressionOrLabelledStatement()
 |	IfStatement()
 |	IterationStatement()
 |	ContinueStatement()
 |	BreakStatement()
 |	ReturnStatement()
 |	WithStatement()
 |  TryStatement()
 |  ThrowStatement()
 |  SwitchStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
 }
 
 void Block()       :
 {}
 {
   LOOKAHEAD(3) 
   "{"/*@bgen(jjtree) StatementList */
       {
         ASTStatementList jjtn001 = new ASTStatementList(JJTSTATEMENTLIST);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
         jjtreeOpenNodeScope(jjtn001);
       }
       try {
/*@egen*/ "}"/*@bgen(jjtree)*/
       } finally {
         if (jjtc001) {
           jjtree.closeNodeScope(jjtn001, true);
           jjtreeCloseNodeScope(jjtn001);
         }
       }
/*@egen*/               
 | "{" [ StatementList() ] "}"
 }
 
 void VariableStatement()       :
 {}
 {
 	"var" VariableDeclarationList() Sc()
 }
 
 // Use statement list (instead of void) to group declaration (statement being unary)
 void VariableDeclarationList()                    :
 {/*@bgen(jjtree) #StatementList(> 1) */
  ASTStatementList jjtn000 = new ASTStatementList(JJTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) #StatementList(> 1) */
        try {
/*@egen*/
 	VariableDeclaration() ( "," VariableDeclaration() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
 }
 
 void VariableDeclaration()                      :
 {/*@bgen(jjtree) VariableDeclaration */
  ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) VariableDeclaration */
        try {
/*@egen*/
 	Identifier() [ Initializer() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
 }
 
 void Initializer()       :
 {}
 {
 //    "=" Expression()
     "=" AssignmentExpression()
 }
 
 void InitializerNoIn()       :
 {}
 {
 //    "=" Expression()
     "=" AssignmentExpressionNoIn()
 }
 
 
 
 void EmptyStatement()       :
 {}
 {
 	";"
 }
 
 void ExpressionOrLabelledStatement()       :
 {}
 {
 	( LOOKAHEAD( Identifier() ":" )
 	 LabelledStatement() 
 	| ExpressionInES() Sc() ) 
 }
 
 void LabelledStatement()       :
 {
   String label;
 } 
 {
   Identifier() { label = jjtree.popNode().toString(); } ":" Statement() { ((ASTStatement)jjtree.peekNode()).addLabel(label); } 
 }
 
 JAVACODE
    void Sc() {

      Token tok = getToken(1);
      if (tok.kind == SEMICOLON) {
         tok = getNextToken();
      } else if (tok.specialToken != null) {
         if ((tok.specialToken.kind != EOL) &&
             (tok.specialToken.kind != SINGLE_LINE_COMMENT)) {
            throw generateParseException();
         }
      } else if ((tok.kind != EOF) && (tok.kind!=RBRACE)) {
           throw generateParseException();
      }
    }
 
 void IfStatement()              :
 /*
  * The disambiguating algorithm of JavaCC automatically binds dangling
  * else's to the innermost if statement.  The LOOKAHEAD specification
  * is to tell JavaCC that we know what we are doing.
  */
 {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) IfStatement */
   try {
/*@egen*/
   "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
 }
 
 
 void IterationStatement()       :
 {}
 {
    DoWhileStatement()
 |  WhileStatement()
 |  LOOKAHEAD( "for" "(" ExpressionNoIn() ";" ) ForStatement()
 |  LOOKAHEAD( "for" "(" ";" ) ForStatement()
 |  LOOKAHEAD( "for" "(" "var" VariableDeclarationList() ";" ) ForVarStatement()
 |	LOOKAHEAD(3) ForInStatement()
 |	LOOKAHEAD(3) ForVarInStatement()
 }
 
 void DoWhileStatement()                   :
 {/*@bgen(jjtree) DoWhileStatement */
  ASTDoWhileStatement jjtn000 = new ASTDoWhileStatement(JJTDOWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) DoWhileStatement */
     try {
/*@egen*/
     <DO> Statement() <WHILE> "(" Expression() ")"/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
       }
     }
/*@egen*/
 }
 
 void WhileStatement()                 :
 {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) WhileStatement */
     try {
/*@egen*/
     <WHILE> "(" Expression() ")" Statement()/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
       }
     }
/*@egen*/
 }
 
 void ForStatement()               :
 {/*@bgen(jjtree) ForStatement */
  ASTForStatement jjtn000 = new ASTForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) ForStatement */
     try {
/*@egen*/
     "for" "("/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
               {
                 ASTEmptyExpression jjtn001 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtreeOpenNodeScope(jjtn001);
               }
               try {
/*@egen*/ ( [ ExpressionNoIn() ] )/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
                   jjtreeCloseNodeScope(jjtn001);
                 }
               }
/*@egen*/                                          ";"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                            {
                              ASTEmptyExpression jjtn002 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                              jjtreeOpenNodeScope(jjtn002);
                            }
                            try {
/*@egen*/  
                            ( [ Expression() ] )/*@bgen(jjtree)*/
                            } catch (Throwable jjte002) {
                              if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte002 instanceof RuntimeException) {
                                throw (RuntimeException)jjte002;
                              }
                              if (jjte002 instanceof ParseException) {
                                throw (ParseException)jjte002;
                              }
                              throw (Error)jjte002;
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  jjtree . nodeArity ( ) == 0);
                                jjtreeCloseNodeScope(jjtn002);
                              }
                            }
/*@egen*/                                          ";"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                            {
                              ASTEmptyExpression jjtn003 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                              boolean jjtc003 = true;
                              jjtree.openNodeScope(jjtn003);
                              jjtreeOpenNodeScope(jjtn003);
                            }
                            try {
/*@egen*/  
                            ( [ Expression() ] )/*@bgen(jjtree)*/
                            } catch (Throwable jjte003) {
                              if (jjtc003) {
                                jjtree.clearNodeScope(jjtn003);
                                jjtc003 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte003 instanceof RuntimeException) {
                                throw (RuntimeException)jjte003;
                              }
                              if (jjte003 instanceof ParseException) {
                                throw (ParseException)jjte003;
                              }
                              throw (Error)jjte003;
                            } finally {
                              if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003,  jjtree . nodeArity ( ) == 0);
                                jjtreeCloseNodeScope(jjtn003);
                              }
                            }
/*@egen*/                                         ")" 
                            Statement()/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
       }
     }
/*@egen*/
 }
 
 void ForVarStatement()                  :
 {/*@bgen(jjtree) ForVarStatement */
  ASTForVarStatement jjtn000 = new ASTForVarStatement(JJTFORVARSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) ForVarStatement */
     try {
/*@egen*/
     "for" "(" "var"  VariableDeclarationList()  ";"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
     {
       ASTEmptyExpression jjtn001 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtreeOpenNodeScope(jjtn001);
     }
     try {
/*@egen*/  
     ( [ Expression() ] )/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
         jjtreeCloseNodeScope(jjtn001);
       }
     }
/*@egen*/                                         ";"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
     {
       ASTEmptyExpression jjtn002 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtreeOpenNodeScope(jjtn002);
     }
     try {
/*@egen*/  
     ( [ Expression() ] )/*@bgen(jjtree)*/
     } catch (Throwable jjte002) {
       if (jjtc002) {
         jjtree.clearNodeScope(jjtn002);
         jjtc002 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte002 instanceof RuntimeException) {
         throw (RuntimeException)jjte002;
       }
       if (jjte002 instanceof ParseException) {
         throw (ParseException)jjte002;
       }
       throw (Error)jjte002;
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002,  jjtree . nodeArity ( ) == 0);
         jjtreeCloseNodeScope(jjtn002);
       }
     }
/*@egen*/                                         ")" 
     Statement()/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
       }
     }
/*@egen*/
 }
 
 void ForInStatement()                 :
 {/*@bgen(jjtree) ForInStatement */
  ASTForInStatement jjtn000 = new ASTForInStatement(JJTFORINSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) ForInStatement */
     try {
/*@egen*/
     "for" "(" PrimaryExpression() <IN> Expression() ")" Statement()/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
       }
     }
/*@egen*/
 }
 
 void ForVarInStatement()                    :
 {/*@bgen(jjtree) ForVarInStatement */
  ASTForVarInStatement jjtn000 = new ASTForVarInStatement(JJTFORVARINSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) ForVarInStatement */
     try {
/*@egen*/
     "for" "(" "var" Identifier()/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                                  {
                                    ASTEmptyExpression jjtn001 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtreeOpenNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ ( [ InitializerNoIn() ] )/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
                                      jjtreeCloseNodeScope(jjtn001);
                                    }
                                  }
/*@egen*/                                         <IN> Expression() ")" Statement()/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
       }
     }
/*@egen*/
 }
 
 void ContinueStatement()                    :
 {/*@bgen(jjtree) ContinueStatement */
  ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) ContinueStatement */
        try {
/*@egen*/
 	"continue" [ Identifier() ] Sc()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
 }
 
 void BreakStatement()                 :
 {/*@bgen(jjtree) BreakStatement */
  ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) BreakStatement */
        try {
/*@egen*/
 	"break" [ Identifier() ] Sc()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
 }
 
 void ReturnStatement()                  :
 {/*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) ReturnStatement */
     try {
/*@egen*/
     "return"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
              {
                ASTEmptyExpression jjtn001 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
              }
              try {
/*@egen*/ ( [ Expression() ] )/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
                  jjtreeCloseNodeScope(jjtn001);
                }
              }
/*@egen*/                                         Sc()/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
       }
     }
/*@egen*/
 }
 
 void WithStatement()                :
 {/*@bgen(jjtree) WithStatement */
  ASTWithStatement jjtn000 = new ASTWithStatement(JJTWITHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) WithStatement */
        try {
/*@egen*/
 	"with" "(" Expression() ")" Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
 }
 
 void TryStatement()               :
 {/*@bgen(jjtree) TryStatement */
  ASTTryStatement jjtn000 = new ASTTryStatement(JJTTRYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) TryStatement */
        try {
/*@egen*/
 	<TRY> Block() 
 	[ Catch() ]
 	[ Finally() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
 }

void ThrowStatement()                 :
{/*@bgen(jjtree) ThrowStatement */
  ASTThrowStatement jjtn000 = new ASTThrowStatement(JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ThrowStatement */
        try {
/*@egen*/
	<THROW> Expression() Sc()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void Catch()        :
{/*@bgen(jjtree) Catch */
  ASTCatch jjtn000 = new ASTCatch(JJTCATCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Catch */
    try {
/*@egen*/
    <CATCH> "(" Identifier() ")" Block()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void Finally()          :
{/*@bgen(jjtree) Finally */
  ASTFinally jjtn000 = new ASTFinally(JJTFINALLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Finally */
        try {
/*@egen*/
	<FINALLY> Block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}


void SwitchStatement()                  :
{/*@bgen(jjtree) SwitchStatement */
  ASTSwitchStatement jjtn000 = new ASTSwitchStatement(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SwitchStatement */
        try {
/*@egen*/
	<SWITCH> "(" Expression() ")" "{"
		( CaseClause() )*
		[ DefaultClause() ( CaseClause() )* ]
	"}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void CaseClause()             :
{/*@bgen(jjtree) CaseClause */
  ASTCaseClause jjtn000 = new ASTCaseClause(JJTCASECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseClause */
  try {
/*@egen*/
  <CASE> Expression() ":" [ StatementList() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void DefaultClause()                :
{/*@bgen(jjtree) DefaultClause */
  ASTDefaultClause jjtn000 = new ASTDefaultClause(JJTDEFAULTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DefaultClause */
        try {
/*@egen*/
	<_DEFAULT> ":" [ StatementList() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/*
 * Function definition - 13
 */






/*
 * Function declaration syntax follows.
 */

// Formal parameters are handled in a somehwat special way
// as it is an entry point to parse the parameter list
// of Function.
void FunctionDeclaration()                      :
{/*@bgen(jjtree) FunctionDeclaration */
   ASTFunctionDeclaration jjtn000 = new ASTFunctionDeclaration(JJTFUNCTIONDECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
/*@egen*/
   Token t1 = getToken(1); // 0 is the last matched token, so use 1 to get
                           // the next one.
   Token t2;
}
{/*@bgen(jjtree) FunctionDeclaration */
   try {
/*@egen*/
   try {
    "function" Identifier()/*@bgen(jjtree) #FormalParameterList( jjtree . nodeArity ( ) == 0) */
                             {
                               ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtreeOpenNodeScope(jjtn001);
                             }
                             try {
/*@egen*/  ( "(" [ FormalParameterList() ] ")" )/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
                                 jjtreeCloseNodeScope(jjtn001);
                               }
                             }
/*@egen*/                                             Block()
   }
   finally {
      t2 = getToken(0);
      StringBuffer sourceString = new StringBuffer("");

      // test special case for empty production
      if (t2.next != t1) { // Something consumed.
    
          for(; t1 != t2; t1 = t1.next)
          {
             if (t1.specialToken != null) {
                 sourceString.append(t1.specialToken.image); // last special token
             }
             sourceString.append(t1.image);
             sourceString.append(" ");
          }
      }
      sourceString.append(t2.image);
      jjtn000.setSourceString(sourceString.toString());
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}           
           
               
SimpleNode FormalParameterList()                      :
{/*@bgen(jjtree) FormalParameterList */
   ASTFormalParameterList jjtn000 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
/*@egen*/  
   Token t; // to force creation of jjThis
}
{/*@bgen(jjtree) FormalParameterList */
   try {
/*@egen*/
   Identifier() ( "," Identifier() )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/

}






/*
 * Program structuring syntax - 14
 */

// ASTProgram Program() #Program :
SimpleNode Program()          :
{/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  { firstElement = true; }
  ( SourceElement() { firstElement = false; } )*  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  { return StrictMode.validate(jjtn000,strictMode); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void SourceElement()       :
{}
{
  Statement() 
| FunctionDeclaration()
}

SimpleNode StatementList()                : 
{/*@bgen(jjtree) StatementList */
   ASTStatementList jjtn000 = new ASTStatementList(JJTSTATEMENTLIST);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
/*@egen*/  
   Token t; // to force creation of jjThis
}
{/*@bgen(jjtree) StatementList */
        try {
/*@egen*/
	( Statement() )+/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtreeCloseNodeScope(jjtn000);
      }
/*@egen*/
      { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}
