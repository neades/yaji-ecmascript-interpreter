/* Generated By:JJTree&JavaCC: Do not edit this line. EcmaScriptConstants.java */
package FESI.Parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface EcmaScriptConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EOL = 26;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 29;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 30;
  /** RegularExpression Id. */
  int BREAK = 32;
  /** RegularExpression Id. */
  int CONTINUE = 33;
  /** RegularExpression Id. */
  int DELETE = 34;
  /** RegularExpression Id. */
  int ELSE = 35;
  /** RegularExpression Id. */
  int FOR = 36;
  /** RegularExpression Id. */
  int FUNCTION = 37;
  /** RegularExpression Id. */
  int IF = 38;
  /** RegularExpression Id. */
  int IN = 39;
  /** RegularExpression Id. */
  int NEW = 40;
  /** RegularExpression Id. */
  int RETURN = 41;
  /** RegularExpression Id. */
  int THIS = 42;
  /** RegularExpression Id. */
  int TYPEOF = 43;
  /** RegularExpression Id. */
  int VAR = 44;
  /** RegularExpression Id. */
  int VOID = 45;
  /** RegularExpression Id. */
  int WHILE = 46;
  /** RegularExpression Id. */
  int WITH = 47;
  /** RegularExpression Id. */
  int CASE = 48;
  /** RegularExpression Id. */
  int CATCH = 49;
  /** RegularExpression Id. */
  int CLASS = 50;
  /** RegularExpression Id. */
  int CONST = 51;
  /** RegularExpression Id. */
  int DEBUGGER = 52;
  /** RegularExpression Id. */
  int _DEFAULT = 53;
  /** RegularExpression Id. */
  int DO = 54;
  /** RegularExpression Id. */
  int ENUM = 55;
  /** RegularExpression Id. */
  int EXPORT = 56;
  /** RegularExpression Id. */
  int EXTENDS = 57;
  /** RegularExpression Id. */
  int FINALLY = 58;
  /** RegularExpression Id. */
  int IMPORT = 59;
  /** RegularExpression Id. */
  int SUPER = 60;
  /** RegularExpression Id. */
  int SWITCH = 61;
  /** RegularExpression Id. */
  int THROW = 62;
  /** RegularExpression Id. */
  int TRY = 63;
  /** RegularExpression Id. */
  int INSTANCEOF = 64;
  /** RegularExpression Id. */
  int TRUE = 65;
  /** RegularExpression Id. */
  int FALSE = 66;
  /** RegularExpression Id. */
  int NULL = 67;
  /** RegularExpression Id. */
  int GET = 68;
  /** RegularExpression Id. */
  int SET = 69;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 70;
  /** RegularExpression Id. */
  int HEX_LITERAL = 71;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 72;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 73;
  /** RegularExpression Id. */
  int EXPONENT = 74;
  /** RegularExpression Id. */
  int STRING_LITERAL = 75;
  /** RegularExpression Id. */
  int SINGLE_STRING_LITERAL_BODY = 76;
  /** RegularExpression Id. */
  int DOUBLE_STRING_LITERAL_BODY = 77;
  /** RegularExpression Id. */
  int UNTERMINATED_STRING_LITERAL = 78;
  /** RegularExpression Id. */
  int REGULAR_EXPRESSION_LITERAL = 79;
  /** RegularExpression Id. */
  int REGULAR_EXPRESSION_BODY = 80;
  /** RegularExpression Id. */
  int REGULAR_EXPRESSION_CHAR = 81;
  /** RegularExpression Id. */
  int REGULAR_EXPRESSION_FIRST_CHAR = 82;
  /** RegularExpression Id. */
  int REGULAR_EXPRESSION_BACKSLASH_SEQUENCE = 83;
  /** RegularExpression Id. */
  int REGULAR_EXPRESSION_CLASS = 84;
  /** RegularExpression Id. */
  int REGULAR_EXPRESSION_CLASS_CHAR = 85;
  /** RegularExpression Id. */
  int IDENTIFIER = 86;
  /** RegularExpression Id. */
  int IDENTIFIER_START = 87;
  /** RegularExpression Id. */
  int IDENTIFIER_PART = 88;
  /** RegularExpression Id. */
  int UNICODE_LETTER = 89;
  /** RegularExpression Id. */
  int UNICODE_ESCAPE_SEQUENCE = 90;
  /** RegularExpression Id. */
  int UNICODE_COMBINING_MARK = 91;
  /** RegularExpression Id. */
  int UNICODE_DIGIT = 92;
  /** RegularExpression Id. */
  int UNICODE_CONNECTOR_PUNCTUATION = 93;
  /** RegularExpression Id. */
  int ZWNJ = 94;
  /** RegularExpression Id. */
  int ZWJ = 95;
  /** RegularExpression Id. */
  int HEX_DIGIT = 96;
  /** RegularExpression Id. */
  int LPAREN = 97;
  /** RegularExpression Id. */
  int RPAREN = 98;
  /** RegularExpression Id. */
  int LBRACE = 99;
  /** RegularExpression Id. */
  int RBRACE = 100;
  /** RegularExpression Id. */
  int LBRACKET = 101;
  /** RegularExpression Id. */
  int RBRACKET = 102;
  /** RegularExpression Id. */
  int SEMICOLON = 103;
  /** RegularExpression Id. */
  int COMMA = 104;
  /** RegularExpression Id. */
  int DOT = 105;
  /** RegularExpression Id. */
  int ASSIGN = 106;
  /** RegularExpression Id. */
  int GT = 107;
  /** RegularExpression Id. */
  int LT = 108;
  /** RegularExpression Id. */
  int BANG = 109;
  /** RegularExpression Id. */
  int TILDE = 110;
  /** RegularExpression Id. */
  int HOOK = 111;
  /** RegularExpression Id. */
  int COLON = 112;
  /** RegularExpression Id. */
  int STRICT_EQ = 113;
  /** RegularExpression Id. */
  int STRICT_NEQ = 114;
  /** RegularExpression Id. */
  int EQ = 115;
  /** RegularExpression Id. */
  int LE = 116;
  /** RegularExpression Id. */
  int GE = 117;
  /** RegularExpression Id. */
  int NE = 118;
  /** RegularExpression Id. */
  int SC_OR = 119;
  /** RegularExpression Id. */
  int SC_AND = 120;
  /** RegularExpression Id. */
  int INCR = 121;
  /** RegularExpression Id. */
  int DECR = 122;
  /** RegularExpression Id. */
  int PLUS = 123;
  /** RegularExpression Id. */
  int MINUS = 124;
  /** RegularExpression Id. */
  int STAR = 125;
  /** RegularExpression Id. */
  int SLASH = 126;
  /** RegularExpression Id. */
  int BIT_AND = 127;
  /** RegularExpression Id. */
  int BIT_OR = 128;
  /** RegularExpression Id. */
  int XOR = 129;
  /** RegularExpression Id. */
  int REM = 130;
  /** RegularExpression Id. */
  int LSHIFT = 131;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 132;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 133;
  /** RegularExpression Id. */
  int PLUSASSIGN = 134;
  /** RegularExpression Id. */
  int MINUSASSIGN = 135;
  /** RegularExpression Id. */
  int STARASSIGN = 136;
  /** RegularExpression Id. */
  int SLASHASSIGN = 137;
  /** RegularExpression Id. */
  int ANDASSIGN = 138;
  /** RegularExpression Id. */
  int ORASSIGN = 139;
  /** RegularExpression Id. */
  int XORASSIGN = 140;
  /** RegularExpression Id. */
  int REMASSIGN = 141;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 142;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 143;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 144;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int NOREGEXP = 1;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"\\u0085\"",
    "\"\\ufeff\"",
    "\"\\u00a0\"",
    "\"\\u1680\"",
    "\"\\u180e\"",
    "\"\\u2000\"",
    "\"\\u2001\"",
    "\"\\u2002\"",
    "\"\\u2003\"",
    "\"\\u2004\"",
    "\"\\u2005\"",
    "\"\\u2006\"",
    "\"\\u2007\"",
    "\"\\u2008\"",
    "\"\\u2009\"",
    "\"\\u200a\"",
    "\"\\u2028\"",
    "\"\\u2029\"",
    "\"\\u202f\"",
    "\"\\u205f\"",
    "\"\\u3000\"",
    "<EOL>",
    "\"//\"",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "<token of kind 31>",
    "\"break\"",
    "\"continue\"",
    "\"delete\"",
    "\"else\"",
    "\"for\"",
    "\"function\"",
    "\"if\"",
    "\"in\"",
    "\"new\"",
    "\"return\"",
    "\"this\"",
    "\"typeof\"",
    "\"var\"",
    "\"void\"",
    "\"while\"",
    "\"with\"",
    "\"case\"",
    "\"catch\"",
    "\"class\"",
    "\"const\"",
    "\"debugger\"",
    "\"default\"",
    "\"do\"",
    "\"enum\"",
    "\"export\"",
    "\"extends\"",
    "\"finally\"",
    "\"import\"",
    "\"super\"",
    "\"switch\"",
    "\"throw\"",
    "\"try\"",
    "\"instanceof\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"get\"",
    "\"set\"",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<SINGLE_STRING_LITERAL_BODY>",
    "<DOUBLE_STRING_LITERAL_BODY>",
    "<UNTERMINATED_STRING_LITERAL>",
    "<REGULAR_EXPRESSION_LITERAL>",
    "<REGULAR_EXPRESSION_BODY>",
    "<REGULAR_EXPRESSION_CHAR>",
    "<REGULAR_EXPRESSION_FIRST_CHAR>",
    "<REGULAR_EXPRESSION_BACKSLASH_SEQUENCE>",
    "<REGULAR_EXPRESSION_CLASS>",
    "<REGULAR_EXPRESSION_CLASS_CHAR>",
    "<IDENTIFIER>",
    "<IDENTIFIER_START>",
    "<IDENTIFIER_PART>",
    "<UNICODE_LETTER>",
    "<UNICODE_ESCAPE_SEQUENCE>",
    "<UNICODE_COMBINING_MARK>",
    "<UNICODE_DIGIT>",
    "<UNICODE_CONNECTOR_PUNCTUATION>",
    "\"\\u200d\"",
    "\"\\u200c\"",
    "<HEX_DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"===\"",
    "\"!==\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
  };

}
