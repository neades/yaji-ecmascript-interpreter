/* Generated By:JJTree&JavaCC: Do not edit this line. EcmaScriptConstants.java */
package FESI.Parser;

/**
 * Token literal values and constants. Generated by
 * org.javacc.parser.OtherFilesGen#start()
 */
public interface EcmaScriptConstants {

    /** End of File. */
    int EOF = 0;
    /** RegularExpression Id. */
    int EOL = 5;
    /** RegularExpression Id. */
    int SINGLE_LINE_COMMENT = 8;
    /** RegularExpression Id. */
    int MULTI_LINE_COMMENT = 9;
    /** RegularExpression Id. */
    int BREAK = 11;
    /** RegularExpression Id. */
    int CONTINUE = 12;
    /** RegularExpression Id. */
    int DELETE = 13;
    /** RegularExpression Id. */
    int ELSE = 14;
    /** RegularExpression Id. */
    int FOR = 15;
    /** RegularExpression Id. */
    int FUNCTION = 16;
    /** RegularExpression Id. */
    int IF = 17;
    /** RegularExpression Id. */
    int IN = 18;
    /** RegularExpression Id. */
    int NEW = 19;
    /** RegularExpression Id. */
    int RETURN = 20;
    /** RegularExpression Id. */
    int THIS = 21;
    /** RegularExpression Id. */
    int TYPEOF = 22;
    /** RegularExpression Id. */
    int VAR = 23;
    /** RegularExpression Id. */
    int VOID = 24;
    /** RegularExpression Id. */
    int WHILE = 25;
    /** RegularExpression Id. */
    int WITH = 26;
    /** RegularExpression Id. */
    int CASE = 27;
    /** RegularExpression Id. */
    int CATCH = 28;
    /** RegularExpression Id. */
    int CLASS = 29;
    /** RegularExpression Id. */
    int CONST = 30;
    /** RegularExpression Id. */
    int DEBUGGER = 31;
    /** RegularExpression Id. */
    int _DEFAULT = 32;
    /** RegularExpression Id. */
    int DO = 33;
    /** RegularExpression Id. */
    int ENUM = 34;
    /** RegularExpression Id. */
    int EXPORT = 35;
    /** RegularExpression Id. */
    int EXTENDS = 36;
    /** RegularExpression Id. */
    int FINALLY = 37;
    /** RegularExpression Id. */
    int IMPORT = 38;
    /** RegularExpression Id. */
    int SUPER = 39;
    /** RegularExpression Id. */
    int SWITCH = 40;
    /** RegularExpression Id. */
    int THROW = 41;
    /** RegularExpression Id. */
    int TRY = 42;
    /** RegularExpression Id. */
    int TRUE = 43;
    /** RegularExpression Id. */
    int FALSE = 44;
    /** RegularExpression Id. */
    int NULL = 45;
    /** RegularExpression Id. */
    int DECIMAL_LITERAL = 46;
    /** RegularExpression Id. */
    int HEX_LITERAL = 47;
    /** RegularExpression Id. */
    int OCTAL_LITERAL = 48;
    /** RegularExpression Id. */
    int FLOATING_POINT_LITERAL = 49;
    /** RegularExpression Id. */
    int EXPONENT = 50;
    /** RegularExpression Id. */
    int STRING_LITERAL = 51;
    /** RegularExpression Id. */
    int ESCAPE_SEQUENCE = 52;
    /** RegularExpression Id. */
    int UNTERMINATED_STRING_LITERAL = 53;
    /** RegularExpression Id. */
    int IDENTIFIER = 54;
    /** RegularExpression Id. */
    int LETTER = 55;
    /** RegularExpression Id. */
    int DIGIT = 56;
    /** RegularExpression Id. */
    int LPAREN = 57;
    /** RegularExpression Id. */
    int RPAREN = 58;
    /** RegularExpression Id. */
    int LBRACE = 59;
    /** RegularExpression Id. */
    int RBRACE = 60;
    /** RegularExpression Id. */
    int LBRACKET = 61;
    /** RegularExpression Id. */
    int RBRACKET = 62;
    /** RegularExpression Id. */
    int SEMICOLON = 63;
    /** RegularExpression Id. */
    int COMMA = 64;
    /** RegularExpression Id. */
    int DOT = 65;
    /** RegularExpression Id. */
    int ASSIGN = 66;
    /** RegularExpression Id. */
    int GT = 67;
    /** RegularExpression Id. */
    int LT = 68;
    /** RegularExpression Id. */
    int BANG = 69;
    /** RegularExpression Id. */
    int TILDE = 70;
    /** RegularExpression Id. */
    int HOOK = 71;
    /** RegularExpression Id. */
    int COLON = 72;
    /** RegularExpression Id. */
    int EQ = 73;
    /** RegularExpression Id. */
    int LE = 74;
    /** RegularExpression Id. */
    int GE = 75;
    /** RegularExpression Id. */
    int NE = 76;
    /** RegularExpression Id. */
    int SC_OR = 77;
    /** RegularExpression Id. */
    int SC_AND = 78;
    /** RegularExpression Id. */
    int INCR = 79;
    /** RegularExpression Id. */
    int DECR = 80;
    /** RegularExpression Id. */
    int PLUS = 81;
    /** RegularExpression Id. */
    int MINUS = 82;
    /** RegularExpression Id. */
    int STAR = 83;
    /** RegularExpression Id. */
    int SLASH = 84;
    /** RegularExpression Id. */
    int BIT_AND = 85;
    /** RegularExpression Id. */
    int BIT_OR = 86;
    /** RegularExpression Id. */
    int XOR = 87;
    /** RegularExpression Id. */
    int REM = 88;
    /** RegularExpression Id. */
    int LSHIFT = 89;
    /** RegularExpression Id. */
    int RSIGNEDSHIFT = 90;
    /** RegularExpression Id. */
    int RUNSIGNEDSHIFT = 91;
    /** RegularExpression Id. */
    int PLUSASSIGN = 92;
    /** RegularExpression Id. */
    int MINUSASSIGN = 93;
    /** RegularExpression Id. */
    int STARASSIGN = 94;
    /** RegularExpression Id. */
    int SLASHASSIGN = 95;
    /** RegularExpression Id. */
    int ANDASSIGN = 96;
    /** RegularExpression Id. */
    int ORASSIGN = 97;
    /** RegularExpression Id. */
    int XORASSIGN = 98;
    /** RegularExpression Id. */
    int REMASSIGN = 99;
    /** RegularExpression Id. */
    int LSHIFTASSIGN = 100;
    /** RegularExpression Id. */
    int RSIGNEDSHIFTASSIGN = 101;
    /** RegularExpression Id. */
    int RUNSIGNEDSHIFTASSIGN = 102;

    /** Lexical state. */
    int DEFAULT = 0;
    /** Lexical state. */
    int IN_SINGLE_LINE_COMMENT = 1;
    /** Lexical state. */
    int IN_MULTI_LINE_COMMENT = 2;

    /** Literal token values. */
    String[] tokenImage = { "<EOF>", "\" \"", "\"\\t\"", "\"\\r\"", "\"\\f\"",
            "<EOL>", "\"//\"", "\"/*\"", "<SINGLE_LINE_COMMENT>", "\"*/\"",
            "<token of kind 10>", "\"break\"", "\"continue\"", "\"delete\"",
            "\"else\"", "\"for\"", "\"function\"", "\"if\"", "\"in\"",
            "\"new\"", "\"return\"", "\"this\"", "\"typeof\"", "\"var\"",
            "\"void\"", "\"while\"", "\"with\"", "\"case\"", "\"catch\"",
            "\"class\"", "\"const\"", "\"debugger\"", "\"default\"", "\"do\"",
            "\"enum\"", "\"export\"", "\"extends\"", "\"finally\"",
            "\"import\"", "\"super\"", "\"switch\"", "\"throw\"", "\"try\"",
            "\"true\"", "\"false\"", "\"null\"", "<DECIMAL_LITERAL>",
            "<HEX_LITERAL>", "<OCTAL_LITERAL>", "<FLOATING_POINT_LITERAL>",
            "<EXPONENT>", "<STRING_LITERAL>", "<ESCAPE_SEQUENCE>",
            "<UNTERMINATED_STRING_LITERAL>", "<IDENTIFIER>", "<LETTER>",
            "<DIGIT>", "\"(\"", "\")\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"",
            "\";\"", "\",\"", "\".\"", "\"=\"", "\">\"", "\"<\"", "\"!\"",
            "\"~\"", "\"?\"", "\":\"", "\"==\"", "\"<=\"", "\">=\"", "\"!=\"",
            "\"||\"", "\"&&\"", "\"++\"", "\"--\"", "\"+\"", "\"-\"", "\"*\"",
            "\"/\"", "\"&\"", "\"|\"", "\"^\"", "\"%\"", "\"<<\"", "\">>\"",
            "\">>>\"", "\"+=\"", "\"-=\"", "\"*=\"", "\"/=\"", "\"&=\"",
            "\"|=\"", "\"^=\"", "\"%=\"", "\"<<=\"", "\">>=\"", "\">>>=\"", };

}
