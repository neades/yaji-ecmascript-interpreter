/* Generated By:JJTree&JavaCC: Do not edit this line. EcmaScriptConstants.java */
package FESI.Parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface EcmaScriptConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EOL = 5;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int BREAK = 11;
  /** RegularExpression Id. */
  int CONTINUE = 12;
  /** RegularExpression Id. */
  int DELETE = 13;
  /** RegularExpression Id. */
  int ELSE = 14;
  /** RegularExpression Id. */
  int FOR = 15;
  /** RegularExpression Id. */
  int FUNCTION = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int IN = 18;
  /** RegularExpression Id. */
  int NEW = 19;
  /** RegularExpression Id. */
  int RETURN = 20;
  /** RegularExpression Id. */
  int THIS = 21;
  /** RegularExpression Id. */
  int TYPEOF = 22;
  /** RegularExpression Id. */
  int VAR = 23;
  /** RegularExpression Id. */
  int VOID = 24;
  /** RegularExpression Id. */
  int WHILE = 25;
  /** RegularExpression Id. */
  int WITH = 26;
  /** RegularExpression Id. */
  int CASE = 27;
  /** RegularExpression Id. */
  int CATCH = 28;
  /** RegularExpression Id. */
  int CLASS = 29;
  /** RegularExpression Id. */
  int CONST = 30;
  /** RegularExpression Id. */
  int DEBUGGER = 31;
  /** RegularExpression Id. */
  int _DEFAULT = 32;
  /** RegularExpression Id. */
  int DO = 33;
  /** RegularExpression Id. */
  int ENUM = 34;
  /** RegularExpression Id. */
  int EXPORT = 35;
  /** RegularExpression Id. */
  int EXTENDS = 36;
  /** RegularExpression Id. */
  int FINALLY = 37;
  /** RegularExpression Id. */
  int IMPORT = 38;
  /** RegularExpression Id. */
  int SUPER = 39;
  /** RegularExpression Id. */
  int SWITCH = 40;
  /** RegularExpression Id. */
  int THROW = 41;
  /** RegularExpression Id. */
  int TRY = 42;
  /** RegularExpression Id. */
  int TRUE = 43;
  /** RegularExpression Id. */
  int FALSE = 44;
  /** RegularExpression Id. */
  int NULL = 45;
  /** RegularExpression Id. */
  int GET = 46;
  /** RegularExpression Id. */
  int SET = 47;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 48;
  /** RegularExpression Id. */
  int HEX_LITERAL = 49;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 50;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 51;
  /** RegularExpression Id. */
  int EXPONENT = 52;
  /** RegularExpression Id. */
  int STRING_LITERAL = 53;
  /** RegularExpression Id. */
  int ESCAPE_SEQUENCE = 54;
  /** RegularExpression Id. */
  int UNTERMINATED_STRING_LITERAL = 55;
  /** RegularExpression Id. */
  int IDENTIFIER = 56;
  /** RegularExpression Id. */
  int LETTER = 57;
  /** RegularExpression Id. */
  int DIGIT = 58;
  /** RegularExpression Id. */
  int LPAREN = 59;
  /** RegularExpression Id. */
  int RPAREN = 60;
  /** RegularExpression Id. */
  int LBRACE = 61;
  /** RegularExpression Id. */
  int RBRACE = 62;
  /** RegularExpression Id. */
  int LBRACKET = 63;
  /** RegularExpression Id. */
  int RBRACKET = 64;
  /** RegularExpression Id. */
  int SEMICOLON = 65;
  /** RegularExpression Id. */
  int COMMA = 66;
  /** RegularExpression Id. */
  int DOT = 67;
  /** RegularExpression Id. */
  int ASSIGN = 68;
  /** RegularExpression Id. */
  int GT = 69;
  /** RegularExpression Id. */
  int LT = 70;
  /** RegularExpression Id. */
  int BANG = 71;
  /** RegularExpression Id. */
  int TILDE = 72;
  /** RegularExpression Id. */
  int HOOK = 73;
  /** RegularExpression Id. */
  int COLON = 74;
  /** RegularExpression Id. */
  int STRICT_EQ = 75;
  /** RegularExpression Id. */
  int STRICT_NEQ = 76;
  /** RegularExpression Id. */
  int EQ = 77;
  /** RegularExpression Id. */
  int LE = 78;
  /** RegularExpression Id. */
  int GE = 79;
  /** RegularExpression Id. */
  int NE = 80;
  /** RegularExpression Id. */
  int SC_OR = 81;
  /** RegularExpression Id. */
  int SC_AND = 82;
  /** RegularExpression Id. */
  int INCR = 83;
  /** RegularExpression Id. */
  int DECR = 84;
  /** RegularExpression Id. */
  int PLUS = 85;
  /** RegularExpression Id. */
  int MINUS = 86;
  /** RegularExpression Id. */
  int STAR = 87;
  /** RegularExpression Id. */
  int SLASH = 88;
  /** RegularExpression Id. */
  int BIT_AND = 89;
  /** RegularExpression Id. */
  int BIT_OR = 90;
  /** RegularExpression Id. */
  int XOR = 91;
  /** RegularExpression Id. */
  int REM = 92;
  /** RegularExpression Id. */
  int LSHIFT = 93;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 94;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 95;
  /** RegularExpression Id. */
  int PLUSASSIGN = 96;
  /** RegularExpression Id. */
  int MINUSASSIGN = 97;
  /** RegularExpression Id. */
  int STARASSIGN = 98;
  /** RegularExpression Id. */
  int SLASHASSIGN = 99;
  /** RegularExpression Id. */
  int ANDASSIGN = 100;
  /** RegularExpression Id. */
  int ORASSIGN = 101;
  /** RegularExpression Id. */
  int XORASSIGN = 102;
  /** RegularExpression Id. */
  int REMASSIGN = 103;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 104;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 105;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 106;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\f\"",
    "<EOL>",
    "\"//\"",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "<token of kind 10>",
    "\"break\"",
    "\"continue\"",
    "\"delete\"",
    "\"else\"",
    "\"for\"",
    "\"function\"",
    "\"if\"",
    "\"in\"",
    "\"new\"",
    "\"return\"",
    "\"this\"",
    "\"typeof\"",
    "\"var\"",
    "\"void\"",
    "\"while\"",
    "\"with\"",
    "\"case\"",
    "\"catch\"",
    "\"class\"",
    "\"const\"",
    "\"debugger\"",
    "\"default\"",
    "\"do\"",
    "\"enum\"",
    "\"export\"",
    "\"extends\"",
    "\"finally\"",
    "\"import\"",
    "\"super\"",
    "\"switch\"",
    "\"throw\"",
    "\"try\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"get\"",
    "\"set\"",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<ESCAPE_SEQUENCE>",
    "<UNTERMINATED_STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"===\"",
    "\"!==\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
  };

}
