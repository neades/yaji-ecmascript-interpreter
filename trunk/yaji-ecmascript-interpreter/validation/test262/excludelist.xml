<?xml version="1.0" encoding="utf-8" ?>
<excludeList>
  <test id="15.4.4.22-9-c-i-30">defineProperty in test is not expected to increase length of array and indeed doesn't in chrome (et.al?). However the spec seems to contradict this:
15.2.3.6   Object.defineProperty states that the DefineOwnProperty internal method is called, and 15.4.5.1 specifies the extended DefineOwnProperty method for arrays as increasing the length if the index exceeds the current length.</test>
  <test id="15.2.4.2-1-1">Testing Object.prototype.toString. Passes undefined but spec says ToObject should be applied to this and ToObject says that it should throw TypeError for undefined</test>
  <test id="15.2.4.2-1-2">Testing Object.prototype.toString. Passes undefined but spec says ToObject should be applied to this and ToObject says that it should throw TypeError for undefined</test>
  <test id="15.2.4.2-2-1">Testing Object.prototype.toString. Passes null but spec says ToObject should be applied to this and ToObject says that it should throw TypeError for null</test>
  <test id="15.2.4.2-2-2">Testing Object.prototype.toString. Passes null but spec says ToObject should be applied to this and ToObject says that it should throw TypeError for null</test>
  <test id="15.2.3.7-6-a-93">Assumes an ordering to keys</test>
  <test id="15.2.3.7-6-a-93-4">Assumes an ordering to keys</test>
  <test id="15.2.3.7-6-a-93-3">Assumes an ordering to keys</test>
  <test id="15.2.3.7-6-a-93-2">Assumes an ordering to keys</test>
  <test id="15.2.3.7-6-a-93-1">Assumes an ordering to keys</test>
  <test id="15.2.3.5-4-40">Assumes an ordering to keys</test>
  <test id="15.2.3.3-4-74">substr is non-normative</test>
  <test id="15.2.3.3-4-164">RegExp.prototype doesn't have a method named compile</test>
  <test id="15.2.3.14-5-b-1">Assumes an ordering to keys</test>
  <test id="15.2.3.14-5-13">Assumes an ordering to keys</test>
  <test id="15.2.3.14-4-1">Assumes an ordering to keys</test>
  <test id="15.2.3.14-3-3">Assumes an ordering to keys</test>
  <test id="15.2.3.14-3-4">Assumes an ordering to keys</test>
  <test id="15.2.3.14-3-1">Assumes an ordering to keys</test>
  <test id="15.2.3.14-2-8">Assumes an ordering to keys</test>
  <test id="S15.5.4.11_A3_T1">Assumes implementation of $nn where nn>m</test>
  <test id="S15.5.4.11_A3_T2">Assumes implementation of $nn where nn>m</test>
  <test id="S15.5.4.11_A3_T3">Assumes implementation of $nn where nn>m</test>
  <test id="S15.4.4.4_A1_T4">Adding a completely sparse array should not be adding when concating</test>
  <test id="15.4.4.4-5-c-i-1">Test seems to miss that the first line of concat calls ToObject as it checks for a primitive number rather than an object</test>
  <test id="S15.2.4.2_A13">The first line of Object.prototype.toString should convert this ToObject - with Null should throw TypeError but test expects it to work</test>
</excludeList>