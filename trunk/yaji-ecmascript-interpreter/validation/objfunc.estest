// objfunc.estest
// FESI Copyright (c) Jean-Marc Lugrin, 1999
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.

// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

writeln ("// " + document.URL);
writeln ("// " + Date());
writeln ("// Test Object and Function");
writeln();


// 15.2
@test object.1
o1 = Object();
o2 = Object(null);
o1!=o2 && o1.constructor == Object && typeof(o2)=="object";

@test object.2
s1 = new String("aha");
o3 = new Object(s1);
o3==s1 && typeof(s1)=="object";

@test object.3
s2 = "aString";
o4 = new Object(s2);
typeof(o4)=="object" && o4=="aString";

@test object.4
n1 = 12.5;
o5 = new Object(n1);
typeof(o5)=="object" && o5==12.5;

@test object.5
b1 = true;
o6 = new Object(b1);
(typeof(o6)=="object") && o6;

@test object.6
Object.prototype.constructor == Object;

@test object.7
o7 = new Object();
o7.a="aa";
o8 = o7.valueOf();
o7==o8;

@test object.8
function oc () {
    this.a = "A";
    this.b = "B";
    this.c = new String();
}
oo = new oc();
oo.a == "A";

@test object.9
o9 = new String;
o9+='aa;'
o9=='aa;'

@test object.10
o7 = {};
o7.a="aa";
o8 = o7.valueOf();
o7==o8;

@test object.11
o1 = {};
o2 = {};
o1!=o2 && o1.constructor == Object && typeof(o2)=="object";

@test object.12
o1 = { f1 : 1 + 1,
       f2 : "mmm",
       "sp ace" : 3 };
o1.f1 == 2 && "mmm" == o1.f2 && o1["sp ace"] == 3;

// 15.2.5.
@test function.1
f1 = Function("x","x+1");
f1(2)==3 && typeof(f1)=="function"

@test function.2
f2 = new Function("x","x+1");
f2(2)==3;

@test function.3
f3 = new Function("x","y", "x+y+1");
f3(3,4)==8;

@test function.4
f4 = new Function("x,y", "x+y+1");
f4(3,4)==8;

@test function.5
f5 = new Function("x ","  y ", "x+y+1");
f5(3,4)==8;

@test function.5.1
f5 = function f51(x,y) {
  x+y+1
};
f5(3,4)==8;

@test function.6
f6 = new Function(" x, y ", "x+y+1");
f6(3,4)==8 && f6.length==2;

@test function.7
f7 = new Function("a", "this.p = a+1");
of7 = new f7(2);
of7.p==3 && typeof(of7)=="object";

@test function.8
f7p = new Object();
f7p.f = new Function("this.p + 5");
f7.prototype = f7p;
f7o = new f7(2);
f7o.f()==8

@test function.9
Function.length==1

@test function.10
typeof(Function.prototype(1,2,3))=="undefined";

@test function.11
function f11(x,y) {doIt(x,y);}
f11.toString().indexOf("doIt")>8;

@test function.12
f11.toString().indexOf("f11")>8;

@test function.13
f13 = new Function("x","y","doIt(x,y)")
f13.toString().indexOf("anonymous")>6;

@test function.14
// Just test proper parsing of empty functions
function e(){}
true;

@test function.15
f15 = function f_15(x) {
  return function f_15_1() { return x + x; }
};
f15(6)() == 12;

@test arguments.1
String(f7.arguments)=="null";

@test arguments.2
function fa1(x,y) {gfa1=arguments;};
fa1(2,3);
gfa1.length==2 && gfa1[0]==2 && gfa1[1]==3;

@test arguments.3
with (gfa1) {
   length==2;
}

@test arguments.4
gy = 12;
function fa2(x, gy) {gy;}
gfa2 = fa2(1);
typeof gfa2 == "undefined";


@test prototype.1
String.prototype.tag = new Function('x',"'<'+x+'>'+this+'</'+x+'>'");
s1 = new String("hello");
s1.tag('B')=='<B>hello</B>';

@test prototype.1.1
String.prototype.tag1 = function (x) {
  return '<'+x+'>'+this+'</'+x+'>';
}
s1 = new String("hello");
s1.tag1('B')=='<B>hello</B>';

@test prototype.2
("title").tag("H1")=='<H1>title</H1>';

@test new.1
function n1() {
   this.a = 1;
   return this;
}
nn = new n1();
nn.a==1;

@test objectaccessor.1
var o = {a: 7, get b() {return this.a + 1;}, set c(x) {this.a = x / 2}};
o.c = 100;
o.b == 51 && o.a == 50 && o.c == void 0;

@test objectaccessor.2
var o = {v: 'value1', get value() {return this.v;}, set value(param) {this.v = param;}};
o.value = 'value2'
o.value == 'value2' && o.v == 'value2'

@test objectaccessor.3
var o = {v: 'value1', set value(param) {this.v = param;}};
o.value = 'value2'
o.v == 'value2'

@test objectaccessor.4
var o = {v: 'value1', get value() {return this.v;}};
o.v = 'value2'
o.value == 'value2'

@test getPrototypeOf.15.2.3.2.2-ES5.1
var o = {};
var p = Object.getPrototypeOf(o);
typeof o === 'object';

@test getPrototypeOf.15.2.3.2.1-ES5.1
try {
  Object.getPrototypeOf("non-object");
  false;
} catch( e ) {
  "TypeError" === e.name;
}

@test freeze.15.2.3.9-ES5.1
var o = {};
Object.freeze(o);
Object.isFrozen(o);

@test freeze.15.2.3.9.1-ES5.1
try {
  Object.freeze("non-object");
  false;
} catch( e ) {
  "TypeError" === e.name;
}

@test isfrozen.15.2.3.12.1-ES5.1
try {
  Object.isFrozen("non-object");
  false;
} catch( e ) {
  "TypeError" === e.name;
}

@test Function.length.15.3.3.2
1 === Function.length;

@test Function.prototype.call.15.3.4.4-1
try {
  var o={};
  var f = 'string';
  f.call(o);
  false;
} catch (e) {
  "TypeError" === e.name;  
}

@test Function.prototype.call.15.3.4.4-4a
var f=function() {
  return this.name;
};
var o={ name:'the name' };
'the name' === f.call(o);

@test Function.prototype.call.15.3.4.4-4b
var f=function() {
  return arguments[1];
};
var o={};
'the name' === f.call(o,void 0,'the name');

@test Function.prototype.call.15.3.4.4-5
1 === Function.prototype.call.length;

@test Function.prototype.apply.15.3.4.3-1
try {
  var o={};
  var f = 'string';
  f.call(o);
  false;
} catch (e) {
  "TypeError" === e.name;  
}

@test Function.prototype.apply.15.3.4.3-9
var f=function() {
  return this.name;
};
var o={ name:'the name' };
'the name' === f.apply(o);

@test Function.prototype.apply.15.3.4.3-8
var f=function() {
  return arguments[1];
};
var o={};
'the name' === f.apply(o,[void 0,'the name']);

@test Function.prototype.apply.15.3.4.3-10
2 === Function.prototype.apply.length;

@Test getOwnPropertyDescriptor.15.2.3.3-1
try {
  var o={};
  var f = 'string';
  Object.getOwnPropertyDescriptor(f);
  false;
} catch (e) {
  "TypeError" === e.name;  
}


@Test getOwnPropertyDescriptor.15.2.3.3-3
var o={"f":10};
var desc = Object.getOwnPropertyDescriptor(o,'f');
desc.value === 10 && 
  desc.writable === true &&
  desc.enumerable === true &&
  desc.configurable === true;

@Test defineProperty.15.2.3.6
var o={};
var o_ret = Object.defineProperty(o,"p", { value: 100 } );
o_ret === o && o.p === 100;

@Test defineProperty.15.2.3.6.1
try {
        var o="";
        Object.defineProperty(o,"p", { value: 100 } );
        false;
} catch (e) {
  "TypeError" === e.name;  
}

@Test defineProperty.Mozilla.Example.1
var o = {}; // Creates a new object  
  
// Example of an object property added with defineProperty with a data property descriptor  
Object.defineProperty(o, "a", {value : 37,  
                               writable : true,  
                               enumerable : true,  
                               configurable : true});  
// 'a' property exists in the o object and its value is 37  
o.a === 37;
  
@Test defineProperty.Mozilla.Example.2
// Example of an object property added with defineProperty with an accessor property descriptor  
var bValue;  
Object.defineProperty(o, "b", {get : function(){ return bValue; },  
                               set : function(newValue){ bValue = newValue; },  
                               enumerable : true,  
                               configurable : true});  
o.b = 38;  
// 'b' property exists in the o object and its value is 38  
// The value of o.b is now always identical to bValue, unless o.b is redefined
o.b === bValue;
  
@Test defineProperty.Mozilla.Example.3
try {
  // You cannot try to mix both :  
  Object.defineProperty(o, "conflict", { value: 0x9f91102,   
                                       get: function() { return 0xdeadbeef; } });
  false;
} catch(e) {
  // throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors
  "TypeError" === e.name;  
}

@Test getOwnPropertyNames.Mozilla.Example.1
var arr = ["a", "b", "c"];  
Object.getOwnPropertyNames(arr).sort().toString() === "0,1,2,length";  
      
@Test getOwnPropertyNames.Mozilla.Example.2
// array-like object  
var obj = { 0: "a", 1: "b", 2: "c"};  
Object.getOwnPropertyNames(obj).sort().toString() === "0,1,2";  
      
@Test getOwnPropertyNames.Mozilla.Example.3
// non-enumerable property  
var my_obj = {};
Object.defineProperty(my_obj, "getFoo", { value: function() { return this.foo; }, enumerable: false });  
my_obj.foo = 1;  
      
Object.getOwnPropertyNames(my_obj).sort().toString() === "foo,getFoo";

@Test defineProperties.MSDN.Example
var obj = Object.defineProperties({}, {
        newDataProperty: {
            value: 101,
            writable: true,
            enumerable: true,
            configurable: true
        },
        newAccessorProperty: {
            set: function (x) {
                this.newaccpropvalue = x + 1;
            },
            get: function () {
                return this.newaccpropvalue;
            },
            enumerable: true,
            configurable: true
        },
    });
obj.newAccessorProperty = 4;
obj.newDataProperty === 101 && obj.newAccessorProperty === 5;

@Test object.create.1
// create a new object whose prototype is a new, empty object  
// and a adding single property 'p', with value 42  
o = Object.create({}, { p: { value: 42 } })  
  
// by default properties ARE NOT writable, enumerable or configurable:  
o.p = 24

o.p === 42; 

@test seal.mdn.1
var obj = {  
     prop: function () {},
     foo: "bar"  
};  
      
var o = Object.seal(obj);  
o === obj && Object.isSealed(obj) === true;  
      
@test seal.mdn.2
var obj = {  
     prop: function () {},
     foo: "bar"  
};  
Object.seal(obj);      

// Changing property values on a sealed object still works.  
obj.foo = "quux";  
obj.foo === "quux";  
      
@test seal.mdn.3
var obj = {  
     prop: function () {},
     foo: "bar"  
};  
Object.seal(obj);      
// But you can't convert data properties to accessors, or vice versa.
try {  
    Object.defineProperty(obj, "foo", { get: function() { return "g"; } }); // throws a TypeError
    false;
} catch( e ) {
  "TypeError" === e.name;  
}  
      
@test seal.mdn.4
var obj = {  
     prop: function () {},
     foo: "bar"  
};  
Object.seal(obj);      

// Now any changes, other than to property values, will fail.  
obj.quaxxor = "the friendly duck"; // silently doesn't add the property
obj.quaxxor === undefined;
  
@test seal.mdn.5
var obj = {  
     prop: function () {},
     foo: "bar"  
};  
Object.seal(obj);      

delete obj.foo; // silently doesn't delete the property
obj.foo === 'bar';  
 
/*test seal.mdn.6
var obj = {  
     prop: function () {},
     foo: "bar"  
};  
Object.seal(obj);      

function fail() {  
      "use strict";  
      delete obj.foo; // throws a TypeError  
}  
try {  
    fail();
    false;
} catch( e ) {
  "TypeError" === e.name;  
}  
*/   
/*test seal.mdn.7
var obj = {  
     prop: function () {},
     foo: "bar"  
};  
Object.seal(obj);      

function fail() {  
      "use strict";  
      obj.sparky = "arf"; // throws a TypeError  
}  
try {  
    fail();
    false;
} catch( e ) {
  "TypeError" === e.name;  
}  
*/
    
@test seal.mdn.8
var obj = {  
     prop: function () {},
     foo: "bar"  
};  
Object.seal(obj);      

try {  
    Object.defineProperty(obj, "ohai", { value: 17 }); // throws a TypeError  
    false;
} catch( e ) {
  "TypeError" === e.name;  
}  
      
@test seal.mdn.9
var obj = {  
     prop: function () {},
     foo: "bar"  
};  
Object.seal(obj);      

// Attempted additions through Object.defineProperty will also throw  
Object.defineProperty(obj, "foo", { value: "eit" }); 
obj.foo === "eit";

@test keys.mdn.1  
var arr = ["a", "b", "c"];
writeln(Object.keys(arr));
Object.keys(arr).toString() === "0,1,2";  

@test keys.mdn.2
// array like object  
var obj = { 0 : "a", 1 : "b", 2 : "c"};
Object.keys(obj).sort().toString() === "0,1,2";  

@test keys.mdn.3
// getFoo is property which isn't enumerable  
var my_obj = Object.create({}, { getFoo : { value : function () { return this.foo } } });  
my_obj.foo = 1;  
      
Object.keys(my_obj).toString() === "foo"; 